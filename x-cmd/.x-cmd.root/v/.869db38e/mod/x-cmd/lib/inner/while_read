
___x_cmd_wreadl(){
    local e;
    case "$1" in
        \"*\")      while read -r e; do    eval printf '"%s\n"' "$1" ; done ;;
        *)          while read -r e; do    "$@" ;                      done
    esac
}

___x_cmd_reval(){
    local ___X_CMD_REVAL_CODE
    while read -r ___X_CMD_REVAL_CODE; do
        eval "$___X_CMD_REVAL_CODE"      # Notice: If read encountering EOF, return 1
        [ $# -eq 0 ] || "$@"
    done
}


# f(){ seq "${1:-1000}" | while read -r aaa; do  :; done   }; time f; 1ms = 100 read
___x_cmd_readl(){
    local code="read -r ${1:?At least provide one argument}"; shift
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --)
                shift
                break ;;
            *)
                code="$code && read -r $1"
                shift ;;
        esac
    done

    if [ "$#" -eq 0 ]; then
        eval "$code"
    else
        while eval "$code"; do
            ___x_cmd_eval "$@"
        done
    fi
}


# testcase: . util; ___x_cmd_writeml "$t" cde  | { ___x_cmd_readml c d; echo "|$c|"; echo "$d"; }

___X_CMD_MULTIPLELINE_SEP="${___X_CMD_UNSEENCHAR_003}${___X_CMD_UNSEENCHAR_002}${___X_CMD_UNSEENCHAR_005}"
___x_cmd_readml___readone(){
    local res
    local line
    while :; do
        read -r line || return $?
        if [ "$line" = "$___X_CMD_MULTIPLELINE_SEP" ]; then
            eval "$1=\"\$res\""
            return 0
        fi

        if [ -z "$res" ]; then  res="$line"
        else                    res="$res
$line"
        fi
    done
}

___x_cmd_readml(){
    local code="___x_cmd_readml___readone ${1:?At least provide one argument}"; shift
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --)
                shift
                break ;;
            *)
                code="$code && ___x_cmd_readml___readone $1"
                shift ;;
        esac
    done

    if [ "$#" -eq 0 ]; then
        eval "$code"
    else
        while eval "$code"; do
            ___x_cmd_eval "$@"
        done
    fi
}

___x_cmd_writeml(){
    if [ "$#" -eq 0 ]; then
        ___x_cmd_cmds_cat
        printf "\n%s\n" "$___X_CMD_MULTIPLELINE_SEP"
    else
        while [ $# -gt 0 ]; do
            printf "%s\n%s\n" "$1" "$___X_CMD_MULTIPLELINE_SEP"
            shift
        done
    fi
}

___x_cmd_readuntil(){
    local ending="$1";  shift

    local IFS=;
    local line
    while [ $# -gt 0 ]; do
        local res=""
        while read -r line; do
            [ "$line" != "$ending" ] || break
            res="${res}${___X_CMD_UNSEENCHAR_NEWLINE}${line}"
        done
        eval "$1"='"${res#?}"'
        shift
    done
}

___x_cmd_pipestr(){
    local data="$1";    shift
    "$@" <<A
$data
A
}
