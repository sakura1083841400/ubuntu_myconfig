# shellcheck    shell=dash

xrc:mod cama/latest # cosmo/latest    # Preload module
xrc:mod:lib x-cmd inner/_index
xrc:mod:lib x-cmd engine/_index
xrc alias

# xrc:mod lightweightmod/latest

___X_CMD_ENGINE_SUBCMD_NAME=__enginerun

___x_cmd_main_otherwise_which(){
    # Notice: ___X_CMD_NO_LOCAL=1 we should accept the local file
    local ___X_CMD_NO_LOCAL=1
    case "$subcmd" in
        */*|*\.*)       ___X_CMD_NO_LOCAL= ;;
    esac
    ___x_cmd_which_one "$subcmd" 2>/dev/null
}

___x_cmd_main_otherwise(){
    local subcmd="$1";  shift

    local ___x_cmd_main_otherwise_code

    ___x_cmd_alias_exec ___x_cmd "$subcmd" "$@"
    ___x_cmd_main_otherwise_code=$?
    [ -z "$___X_CMD_ALIAS_EXEC_EXIST" ] || return $___x_cmd_main_otherwise_code

    # reference: https://github.com/x-bash/pkg/pull/59
    local ___X_CMD_STR___DASH2UNDERLINE=; ___x_cmd_str___dash2underline "$subcmd"
    if command -v "___x_cmd_${___X_CMD_STR___DASH2UNDERLINE}" 2>/dev/null 1>&2; then
        "___x_cmd_${___X_CMD_STR___DASH2UNDERLINE}" "$@"
        return
    fi

    local ___X_CMD_WHICH_ONE_RESULT
    local ___X_CMD_WHICH_ONE_RESOURCE_TYPE

    if ___x_cmd_main_otherwise_which; then
        x:debug "Executing Resource [type=$___X_CMD_WHICH_ONE_RESOURCE_TYPE] [file=$___X_CMD_WHICH_ONE_RESULT]"
        case "$___X_CMD_WHICH_ONE_RESOURCE_TYPE" in
            # workspace)      ___x_cmd_exe_workspace  "$___X_CMD_WHICH_ONE_RESULT" "$@" ;;
            local)          ___x_cmd_engine_run                 "$___X_CMD_WHICH_ONE_RESULT" "$@" ;;
            hub|http)       ___x_cmd_engine_run                 "$___X_CMD_WHICH_ONE_RESULT" "$@" ;;
            # FIXME
            official)       ___x_cmd_engine_run_main    xrc     "$___X_CMD_WHICH_ONE_RESULT" "$@" ;;
        esac
        ___x_cmd_main_otherwise_code=$?
        x:debug "Resource Executed [type=$___X_CMD_WHICH_ONE_RESOURCE_TYPE] [file=$___X_CMD_WHICH_ONE_RESULT] [code=$___x_cmd_main_otherwise_code]"
        return "$___x_cmd_main_otherwise_code"
    fi

    # TODO: If we fail to introduct from xbin. Please provide the interface, ask user for what he/she wants and whether set the alias for that module globally.
    ___x_cmd_main_otherwise_code=$?
    if ___x_cmd pkg xbin init "$subcmd"; then
        "___x_cmd_${___X_CMD_STR___DASH2UNDERLINE}" "$@"
        return
    fi

    # if ___x_cmd lightweightmod load "$subcmd"; then
    #     "___x_cmd_${___X_CMD_STR___DASH2UNDERLINE}" "$@"
    #     return
    # fi

    x:error "___x_cmd_which_one fail [code=${___x_cmd_main_otherwise_code}]"
    return 1
}

# xrc:log='___x_cmd_log "$@"'

___x_cmd_alias_init ___x_cmd
___x_cmd_main(){            # x:trace x     # TODO: will effect x log
    [ $# -gt 0 ]    ||      set -- --help

    local op="$1";      shift
    case "$op" in
        log)                                    ___x_cmd_log            "$@" ;;        # For efficiency

        # op|open)  # op = open + browse + ___x_cmd_showwebsite

        help|--help|-h)                         ___x_cmd helpapp        "$@" ;;

        shbin)                                  ___x_cmd_shbin          "$@" ;;
        bashbin)                                ___x_cmd_bashbin        "$@" ;;

        # deprecated readl|rl ...
        readl|rl)                               ___x_cmd_readl          "$@" ;;
        readeval|reval)                         ___x_cmd_reval          "$@" ;;

        login)                                  ___x_cmd hub login      "$@" ;;

        run)                                    ___x_cmd_engine_run     "$@" ;;

        :*)                                     ___x_cmd_main___colon   "$@" ;;
        *=*)                                    ___x_cmd_main___eq              "$op"       "$@" ;;

        sh|bash|zsh|ksh|dash|ash)               ___x_cmd_shellengine            "$op"       "$@" ;;
        z|uz|uzr)                               ___x_cmd zuz                    "$op"       "$@" ;;

        *)                                      ___x_cmd_main_otherwise         "$op"       "$@" ;;
    esac
}

___x_cmd_main___colon(){
    local op="$1";      shift
    case "$op" in
        :)                                      ___x_cmd ddgo               "$@" ;;
        :*)                                     ___x_cmd xdk    "${op#:}"   "$@" ;;
    esac
}

___x_cmd_main___eq(){
    local op="$1";      shift
    case "$op" in
        "="*)                                   ___x_cmd_defaultassignvar       "${op#=}"   "$@" ;;

        *:=)                                    ___x_cmd_varset                 "${op%:=}"  "$@" ;;
        *=)                                     ___x_cmd_varset_without_end     "${op%=}"   "$@" ;;
        *=if)                                   ___x_cmd_eqifelse               "$op"       "$@" ;;
        *=case)                                 ___x_cmd_eqcase                 "$op"       "$@" ;;
        *=join*)                                ___x_cmd___varjoin              "$op"       "$@" ;;
    esac
}

# Deprecated ...
___x_cmd_clear(){
    local version="${1}";
    [ -n "$version" ] || N=x M="Please provide the x-cmd version" log:ret:64
    local codedir="$___X_CMD_ROOT/v/$version"
    [ -d "$codedir" ] || {
        x:info "Not found x-cmd [version=$version] code in the current environment"
        return 0
    }

    case "$version" in
        alpha|beta|latest)
            local old_version="$version"
            local old_codedir="$codedir"
            local x_file="$codedir/X"
            local line1=; local line2=
            { read -r line1 && read -r line2;  } < "$x_file"
            local new_version="${line2#"___X_CMD_VERSION="}"
            [ -n "$new_version" ] || return
            x:info "The corresponding version for x-cmd's $old_version is -> $new_version"
            version="$new_version"
            codedir="$___X_CMD_ROOT/v/$version"

            if [ ! -d "$codedir" ]; then
                x:info "The code for x-cmd [version=$new_version] no longer exists"
                ___x_cmd rmrf "$old_codedir"
                return 0
            fi
            ;;
    esac

    x:info "Attempting to remove the code for x-cmd [version=$version] -> x rmrf $codedir"
    if [ "$version" != "$___X_CMD_VERSION" ]; then
        x:warn "If other shells are using this version, they may be affected."
        if ___x_cmd ui yesno -r "Do you want to remove the code for x-cmd [version=$version] -> x rmrf $codedir"; then
            ___x_cmd rmrf "$codedir"
        fi
    else
        x:warn "The current shell is using x-cmd with [version=$version]. If deleted, it won't function well"
        local id=
        ___x_cmd ui select id \
            "Do you want to remove the code for x-cmd [version=$version] -> x rmrf $codedir" \
            "Later, I will do it by myself (RECOMMENDED)" \
            "Just remove the code for x-cmd [version=$version]" \
            "Remove the code for x-cmd [version=$version] and EXIT the current shell"

        case "$id" in
            1)  return 0 ;;
            2)  ___x_cmd rmrf "$codedir" ;;
            3)  ___x_cmd rmrf "$codedir"; exit 0 ;;
        esac
    fi
}

___x_cmd_source(){
    local ___x_cmd___source_run_filepath="${1:?filepath}";        shift
    . "$___x_cmd___source_run_filepath" "$@"
}

# subshell rc
___x_cmd_ssrc(){
    ( ___x_cmd_source "$@" )
}

___x_cmd_showwebsite(){
    local website="$1"
    local msg="${2:-For more info}"
    ___x_cmd open "$website" || {
        x:info "$msg  ->  $website"
        ___x_cmd qrencode "$website" || true
    }
}

___x_cmd_pipevar(){
    local varname="$1"; shift
    [ $# -gt 0 ] || {
        eval 'printf "%s\n" "$'"$varname"'"'
        return
    }
    eval '
    "$@" <<A
$'"$varname"'
A
'
}
