# shellcheck shell=dash disable=2034,2016,2120

# @gemini -a file -t 0 -p
# Enter into REPL mode
# Input prompt
# Summarize
# Translate
# EXIT

# Envrionment ...
# ___X_CMD_CHAT_CURRENT_ATTCHMENT_LIST=""
# ___X_CMD_CHAT_CURRENT_SESSION=""
___x_cmd_chat___repl(){
    local session="$1"
    [ -z "$session" ] || set -- --session "$session"
    ___x_cmd_chat___exec --send "$@"
}

___x_cmd_chat___exec_repl(){
    ___x_cmd_is_interactive || N=chat M="Repl can only be used in an interactive environment" log:ret:1
    local x_=
    local msg=
    local previous=
    if [ -z "$session" ]; then
        ! ___x_cmd_chat___exec_repl___id_previous_ || previous="$x_"
        ___x_cmd ui select ,msg     "NEXT"                      \
                "start a new repl"                              \
                ${previous:+"using previous repl -> $previous"} \
                "interactive Selection Previous repl"           \
                "return 0"
        case "$msg" in
            start*)     x_=; ___x_cmd_chat___exec_repl___id_
                        session="$x_"
                        ;;
            using*)     session="$previous" ;;
            interactive*)
                        x_=; ___x_cmd_chat___exec_repl___id_previous_app_ || return
                        session="$x_"
                        ;;
            *)          return 0 ;;
        esac
    fi

    ___x_cmd_chat___exec_repl_loop "$@"
}

# x ls | @ -a 'work.note' --> Save to the llm results ...

___x_cmd_chat___exec_repl_loop(){
    chat:info "repl [session=$session]"

    local id
    local history_num=10
    local ___X_CMD_MD_LLM_LESS_DISABLE=1
    local x_=""
    local question=""

    x_=; ___x_cmd_chat___exec_repl___session_runid_ "$session"
    local run_id="$x_";

    while true; do
        question=

        printf "[%s] %s\n" "$session"  "$run_id" >/dev/tty
        x_=; ___x_cmd_chat___exec_repl___ted_ || break
        printf "\033[1;7m>>> %s \033[0m\n" "$x_" > /dev/tty

        case "$x_" in
            # /attach)
            #     ;;      # add attachment to the list
            # /rm)

            #     ;;      # remove attachment from the list

            /h|/help)
                    ___x_cmd_chat___exec_repl___printhelp ;;
            /exit)  break ;;

            /init)
                    # set default provider/model
                    # set default temperature
                    # store the session data ...
                    ___x_cmd_chat_init
                    ;;
            /history)
                    ___x_cmd_chat___exec_repl_history app ;;
            "")
                    ___x_cmd ui select id   "Next"      \
                        "/h         | show help"        \
                        "/exit      | exit the loop"    \
                        "/history   | manage repl history records" \
                        "...        | continue the loop"

                    case "$id" in
                        1)      ___x_cmd_chat___exec_repl___printhelp ;;
                        2)      break ;;
                        3)      ___x_cmd_chat___exec_repl_history app ;;
                    esac
                    ;;

            \=' '*)
                    chat:info "Execute the command —> ${x_#'= '}"
                    eval "${x_#'= '}"
                    ;;

            *)
                    ___x_cmd_chat___exec_repl_history add "$x_"
                    question="$x_"
                    ___x_cmd_chat___exec_inner_ || {
                        chat:debug "Execution failed"
                        continue
                    }
                    run_id=$(( run_id + 1 ))
                    question=""
                    reflist=""
                    imagelist=""
        esac
    done

    # store the default session value ...
    chat:info \
        --tip1 "resume the session -> @ -s $session" \
        --tip2 "resume the session -> @ -s -" \
        "Exit Session -> $session"
}

# show all of the help ...
___x_cmd_chat___exec_repl___printhelp(){
    ___x_cmd ui style info "Commands:
    /h|/help    | show help
    /exit       | exit the loop
    /history    | manage repl history records
    = <command> | execute the shell command

Other inputs continue the loop, use \ to start multi-line input content
" >/dev/tty
}

# Section: text edit
___x_cmd_chat___exec_repl___ted_(){
    local style="${___X_CMD_CHAT_EXEC_REPL_TED_STYLE:-fzf}"
    case "$style" in
        gum)    ___x_cmd_chat___exec_repl___gum_    "$@" ;;
        fzf)    ___x_cmd_chat___exec_repl___fzf_    "$@" ;;
        *)      ___x_cmd_chat___exec_repl___read_   "$@" ;;
    esac
}

___x_cmd_chat___exec_repl___read_(){
    x_="$( ___x_cmd_chat___exec_repl___read )"
}

___x_cmd_chat___exec_repl___read(){
    local initial_value="$1"    # TODO
    trap 'return 130' INT
    printf "\0337>>> " >/dev/tty
    local x_=""
    read -r x_ || return
    [ "$x_" = "${x_%\\}" ] || {
        x_="${x_%\\}
"
        printf "%s" "... " >/dev/tty
        while read -r line || {
            x_="${x_}${line}
"
            break
        }; do
            printf "%s" "... " >/dev/tty
            x_="${x_}${line}
"
        done
    }
    printf "\0338\033[J\033[2K" >/dev/tty
    printf "%s\n" "$x_"
}

___x_cmd_chat___exec_repl___gum_(){
    local initial_value="$1"
    if [ "$initial_value" != "${initial_value#*"${___X_CMD_UNSEENCHAR_NEWLINE}"}" ]; then
        x_="$(___x_cmd gum write --width 0 --header "<alt+enter/ctrl+j> new line • <ctrl+e> open editor • <enter> submit" --no-show-help --value "$initial_value")"
    else
        x_="$(___x_cmd gum input --prompt=">>> " --width 0 --value "$initial_value" --no-show-help --placeholder="<enter> submit • <ctrl+c> exit • </h> help • <\> multi-line input")" || return
        [ "$x_" = "${x_%\\}" ] || {
            x_="$(___x_cmd gum write --width 0 --header "<alt+enter/ctrl+j> new line • <ctrl+e> open editor • <enter> submit" --no-show-help --value "${x_%\\}")"
        }
    fi
}

# EndSection

# Section: id
___x_cmd_chat___exec_repl___id_previous_app_(){
    local dir="$___X_CMD_CHAT_SESSION_DIR/sh"
    [ -d "$dir" ] || N=chat M="Not found the previous repl session" log:ret:1
    ___x_cmd_is_interactive || N=chat M="Please use in an interactive environment" log:ret:1

    chat:info "Select previous session"
    local ___X_CMD_CSV_APP_DATA_Session=
    local ___X_CMD_CSV_APP_DATA_ModifyTime
    ___x_cmd csv app --clear --return var --width '20,20'  <<A
$(
    ___x_cmd_cmds find "$dir" -name 'chat.response.yml' 2>/dev/null | while read -r l; do
        l="${l#"$dir"/}"
        l="${l%%__*}"
        printf "%s %s\n" "${l##*/}" "${l%/*}"
    done | ___x_cmd_cmds sort -r | ___x_cmd_cmds awk 'BEGIN{ print "Session,ModifyTime"; }(!_[$2]){ print "sh/" $2 "," $1; _[$2]=1; }'
)
A
    [ -n "$___X_CMD_CSV_APP_DATA_Session" ] || return
    x_="$___X_CMD_CSV_APP_DATA_Session"
}

___x_cmd_chat___exec_repl___id_previous_(){
    local dir="$___X_CMD_CHAT_SESSION_DIR/sh/$$"
    [ -d "$dir" ] || return

    x_=""
    local i; for i in "$dir"/*; do
        x_="${i#"$dir"/}"
    done 2>/dev/null
    x_="sh/$$/$x_"
}

___x_cmd_chat___exec_repl___id_(){
    x_=""
    local dir="$___X_CMD_CHAT_SESSION_DIR/sh/$$"
    local acc=1
    [ ! -d "$dir" ] || {
        local i; for i in "$dir"/*; do
            acc="$((acc+1))"
        done 2>/dev/null
    }
    x_="sh/$$/$acc"
}

___x_cmd_chat___exec_repl___session_runid_(){
    x_=""
    local session="$1"
    local dir="$___X_CMD_CHAT_SESSION_DIR/$session"
    local acc=1
    [ ! -d "$dir" ] || {
        local i; while read -r l; do
            acc="$((acc+1))"
        done <<A
$( ___x_cmd_cmds find "$dir" -name 'chat.response.yml' 2>/dev/null )
A
    }
    x_="$acc"
}

# EndSection
