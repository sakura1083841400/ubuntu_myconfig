# shellcheck shell=dash

# Introduced from line module
# printf
___x_cmd_prf(){
    local IFS="
"

    local ___X_CMD_LINE_INNER_LINE
    while read -r ___X_CMD_LINE_INNER_LINE; do
        printf -- "$@" "$___X_CMD_LINE_INNER_LINE"
    done
}

# print uniq
___x_cmd_uni___uniq(){
    ___x_cmd_cmds_awk '(!a[ $0 ]){ print;  a[ $0 ] = 1; }'
}

___x_cmd_uni(){
    if [ "$#" -eq 0 ]; then
        ___x_cmd_uni___uniq
    else
        {
            if [ "$1" = "-n" ]; then    shift
            else                        ___x_cmd_cmds_cat
            fi
            printf "%s\n" "$@"
        } | ___x_cmd_uni___uniq
    fi
}

# Hanzi(chinese character) -- duo
# I want to use du as the word root for two, since uni is word root for once. But it is the command for disk usage
# I release it means two in europeon.
___x_cmd_duo___pdup(){
    ___x_cmd_cmds_awk '{
    if (!a[ $0 ]) a[ $0 ] = 1
    else {
        if (a[ $0 ] == 1) print
        a[ $0 ] = 2
    }
}'
}

# TODO: intersect using awk
___x_cmd_inter(){
    ___x_cmd_duo "$@"
}

___x_cmd_duo(){
    if [ "$#" -eq 0 ]; then
        ___x_cmd_duo___pdup
    else
        {
            if [ "$1" = "-n" ]; then    shift
            else                        ___x_cmd_cmds_cat
            fi
            printf "%s\n" "$@"
        } | ___x_cmd_duo___pdup
    fi
}

___x_cmd_minus(){
    local IFS="
"

    data="$*" ___x_cmd_cmds_awk '
BEGIN{
    l = split(ENVIRON["data"], arr, "\n")
    for (i=1; i<=l; ++i) ban[arr[i]] = 1
}

ban[$0]!=1{  print;  }
'
}

# TODO: Different design using awk
___x_cmd_xor(){
    ___x_cmd_uno "$@"
}

# In Spanish and Italian it means one. It looks similar to the word uni and duo. That why I use uno instead of one,
___x_cmd_uno(){
    {
        if [ "$1" = "-n" ]; then    shift
        else                        ___x_cmd_cmds_cat
        fi
        printf "%s\n" "$@"
    } | ___x_cmd_cmds_awk '
    $0!=""{
        t = has[ seq[l++] = $0 ]++
    }

    END{
        for (i=1; i<=l; ++i) if (1 == has[seq[i]]) print seq[i]
    }'
}


___x_cmd_join(){
    local noblank=
    [ "$1" != "--noblank" ] || {
        noblank=1
        shift
    }

    local ___X_CMD_LINE_INNER_SEP="${1:-
}"
    local ___X_CMD_LINE_INNER_BEGIN="$2"
    local ___X_CMD_LINE_INNER_END="$3"
    local IFS="
"

    local ___X_CMD_LINE_INNER_LINE
    local first=
    while read -r ___X_CMD_LINE_INNER_LINE; do
        [ -z "$noblank" ] || [ -n "$___X_CMD_LINE_INNER_LINE" ] || continue

        if [ -n "$first" ]; then
            printf "%s%s%s%s" \
                "$___X_CMD_LINE_INNER_SEP"      \
                "$___X_CMD_LINE_INNER_BEGIN"    \
                "$___X_CMD_LINE_INNER_LINE"     \
                "$___X_CMD_LINE_INNER_END"
        else
            first=1
            printf "%s%s%s" \
                "$___X_CMD_LINE_INNER_BEGIN"    \
                "$___X_CMD_LINE_INNER_LINE"     \
                "$___X_CMD_LINE_INNER_END"
        fi
    done
}

___x_cmd_join_(){
    local noblank=
    [ "$1" != "--noblank" ] || {
        noblank=1
        shift
    }

    local ___X_CMD_LINE_INNER_SEP="${1:-
}"
    local ___X_CMD_LINE_INNER_BEGIN="$2"
    local ___X_CMD_LINE_INNER_END="$3"
    local IFS="
"

    local ___X_CMD_LINE_INNER_LINE
    x_=
    local first=
    while read -r ___X_CMD_LINE_INNER_LINE; do
        [ -z "$noblank" ] || [ -n "$___X_CMD_LINE_INNER_LINE" ] || continue

        if [ -n "$first" ]; then
            x_="${x_}""$___X_CMD_LINE_INNER_SEP""$___X_CMD_LINE_INNER_BEGIN""$___X_CMD_LINE_INNER_LINE""$___X_CMD_LINE_INNER_END"
        else
            x_="$___X_CMD_LINE_INNER_BEGIN""$___X_CMD_LINE_INNER_LINE""$___X_CMD_LINE_INNER_END"
            first=1
        fi
    done
}

# From module args
# seq 3 | x arg1 echo '$1'
# Efficiency problem: It is using eval to run the command.
___x_cmd_arg1(){
    local i
    local code_func='___x_cmd_args___run_inner(){ eval '
    # for ((i=1; i<=$#; ++i)); do
    i=1
    while [ $i -le $# ];do
        eval "local _$i; _$i=\"\$$i\""
        # code_func="$code_func \"\$_$i\" \\\"\\\$@\\\" "
        code_func="$code_func \"\$_$i\" "
        i=$((i+1))
    done
    code_func="$code_func ; }"
    eval "$code_func"

    while read -r _a1; do
        ___x_cmd_args___run_inner "$_a1"
    done
}
