# shellcheck shell=dash

# cmds actually means cmdshim

___x_cmd_cmds(){
    [ $# -gt 0 ] || N=x M="___x_cmd_cmds expect at least one argument" log:ret:64

    local op="$1";  shift
    case "$op" in
        cd|mv|cp|mkdir|rm|touch|awk|ls|cat|sleep|ln)
            ___x_cmd_cmds_"$op" "$@"
            return
            ;;
        --)
            ___x_cmd_cmds_run "$@"
            ;;

        *)
            ___x_cmd_cmds_run "$op" "$@"
            ;;
    esac
}

if [ -n "${ZSH_VERSION}${BASH_VERSION}" ]; then
# `command cd` will not execute buildin command `cd` in zsh, refer: https://linux.die.net/man/1/zshbuiltins
___x_cmd_cmds_cd(){
    builtin cd "$@" || return
}

else

___x_cmd_cmds_cd(){
    command cd "$@" || return
}

fi

___x_cmd_cd0(){
    local OLDPWD0="$OLDPWD"
    ___x_cmd_cmds_cd "$1" 2>/dev/null || {
        x:error "cd cannot be performed to the directory[$1], it might not exist"
        return 1
    }
    OLDPWD="$OLDPWD0"
}

___x_cmd_cmds_run(){
    local x_
    ___x_cmd_whichbin_ "$1" || return 127   # just like command return
    shift
    "$x_" "$@"
}

# cache to the directory in the future
___x_cmd_cmds___autogen(){
    local IFS=" "

    local cmdstr=""
    local binp=""

    # TODO: optimize in the future.

    local i; for i in mv cp mkdir rm touch awk ls cat sleep ln ; do
        if   [ -x "/bin/$i" ];           then binp="/bin/$i"
        elif [ -x "/usr/bin/$i" ];       then binp="/usr/bin/$i"
        elif [ -x "/usr/local/bin/$i" ]; then binp="/usr/local/bin/$i"
        else
            cmdstr="$cmdstr
___x_cmd_cmds_$i(){
    ___x_cmd_cmds_run $i \"\$@\"
}
"
            continue
        fi

        cmdstr="$cmdstr
___x_cmd_cmds_$i(){
    $binp \"\$@\"
}
"
    done

    eval "$cmdstr"
}

___x_cmd_cmds___autogen
