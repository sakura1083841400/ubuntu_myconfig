# shellcheck shell=dash

# Section 3: main entrance helper: xrc_set_main, which_one, which_one_with_naming
# RETURN ___X_CMD_WHICH_ONE_NAMING
___x_cmd_which_one_with_naming(){
    local RESOURCE_NAME="${1:?Provide resource name for ___x_cmd_which_one_with_naming}"

    ___X_CMD_WHICH_ONE_NAMING=

    case "$RESOURCE_NAME" in
        *=/*)                   ;;
        *=http://*|*=https://*) ;;
        *=*@*/*)                ;;
        *=./*|*=../*)           ;;
        *=*)                    ;;
        *)
            # TODO: some future work for http
            case "$RESOURCE_NAME" in

                */*)    ;;  # Should no set alias function when is a path
                *)      ___X_CMD_WHICH_ONE_NAMING="${RESOURCE_NAME}" ;;     # Only when it is a module name...
            esac
            # ___X_CMD_WHICH_ONE_NAMING="${RESOURCE_NAME##*/}"
            ___x_cmd_which_one "${RESOURCE_NAME}"
            return "$?"
    esac

    ___X_CMD_WHICH_ONE_NAMING="${RESOURCE_NAME%%=*}"
    ___x_cmd_which_one "${RESOURCE_NAME#*=}"
}

# RETURN ___X_CMD_WHICH_ONE_RESULT, ___X_CMD_WHICH_ONE_RESOURCE_TYPE
___x_cmd_which_one(){
    local RESOURCE_NAME="${1:?Provide resource name for ___x_cmd_which_one}"

    ___X_CMD_WHICH_ONE_RESOURCE_TYPE=
    ___X_CMD_WHICH_ONE_RESULT=

    local TGT
    case "$RESOURCE_NAME" in
        /*|?:/*)
            x:debug "Resource recognized as local file: $RESOURCE_NAME"
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=local
            ___X_CMD_WHICH_ONE_RESULT="$RESOURCE_NAME"
            return 0
            ;;
        http://*|https://*)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=http
            x:debug "Resource recognized as http resource: $RESOURCE_NAME"

            TGT="$___X_CMD_ROOT/.http_resource/BASE64-URL-$(printf "%s" "$RESOURCE_NAME" | base64 | tr -d '\r\n')"
            if ! CACHE="$TGT" ___x_cmd_httpget "$RESOURCE_NAME"; then
                x:debug "ERROR: Fail to load http resource due to network error or other: $RESOURCE_NAME "
                return 1
            else
                ___X_CMD_WHICH_ONE_RESULT="$TGT"
            fi
            ;;
        *:*)
            xrc hub/latest
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            local x_ ;
            local return_code=0; ___x_cmd_hub___main file which_ "$RESOURCE_NAME" || return_code=$?
            ___X_CMD_WHICH_ONE_RESULT="$x_"
            return $return_code
            # Will set ___X_CMD_WHICH_ONE_RESOURCE_TYPE=1 if from unknow source
            ;;
        \./*|\.\./*)
            x:debug "Resource recognized as local file with relative path: $RESOURCE_NAME"

            [ -f "$RESOURCE_NAME" ] || {
                x:warn "Local file not exists ==> $RESOURCE_NAME"
                return "$x_EX_FILENOTFOUND"
            }

            local x_; ___x_cmd_abspath_ "$RESOURCE_NAME" || return  # TODO: Why there must be abspath ?
            ___X_CMD_WHICH_ONE_RESULT="$x_"
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=local
            return 0
            ;;
        *)
            if [ -z "$___X_CMD_NO_LOCAL" ]; then
                # This is ONLY for x-cmd
                if [ -f "$RESOURCE_NAME" ]; then
                    ___X_CMD_WHICH_ONE_RESULT="$RESOURCE_NAME"  # TODO: why it is not abspath ?
                    ___X_CMD_WHICH_ONE_RESOURCE_TYPE=local
                    return      # local file
                fi

                # Try to shutdown this facility. In the future, we will introduce the simular features in different modules.
                # if TGT="$(___x_cmd_search_path . ".x-cmd/$RESOURCE_NAME")"; then
                #     ___X_CMD_WHICH_ONE_RESOURCE_TYPE=workspace
                #     ___X_CMD_WHICH_ONE_RESULT="$TGT/.x-cmd/$RESOURCE_NAME"
                #     return                   # .x-cmd
                # fi
            fi

            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=official
            # x-bash module
            x:debug "Resource recognized as x-bash module: $RESOURCE_NAME"
            local module="$RESOURCE_NAME"
            if [ "${RESOURCE_NAME#*/}" = "$RESOURCE_NAME" ] ; then
                module="$module/latest"         # If it is short alias like str (short for str/latest)
                x:debug "Version suffix unavailable. Using \"latest\" by default: $module"
            fi

            TGT="$___X_CMD_ROOT_MOD/$module"
            if [ -f "$TGT" ]; then
                ___X_CMD_WHICH_ONE_RESULT="$TGT"
                return 0
            fi
            x:error --tgt "$TGT" --mod "$module" "Module not found in ___x_cmd_which_one()"
            return "$x_EX_FILENOTFOUND"

            # x:info "Downloading resource=$RESOURCE_NAME to local cache: $TGT"
            # if ___x_cmd_httpget_gitx_official "mod/$module" "$TGT"; then
            #     ___X_CMD_WHICH_ONE_RESULT="$TGT"
            #     return 0
            # fi

            # x:warn "ERROR: Fail to load module due to network error or other: $RESOURCE_NAME"
            # return 1
    esac
}
# EndSection

# Section: new design: will be introduced in the next version

# x_type=official
# x_=

# In our design, xrc just for module, no http service ...
_____x_cmd_xrc_which_(){
    local RESOURCE_NAME="${1:?Provide resource name for ___x_cmd_which_one}"

    ___X_CMD_WHICH_ONE_RESOURCE_TYPE=official
    # x-bash module
    x:debug "Resource recognized as x-bash module: $RESOURCE_NAME"

    local module="$RESOURCE_NAME"
    case "$RESOURCE_NAME" in
        */*)    ;;
        *)
            module="$module/latest"         # If it is short alias like str (short for str/latest)
            x:debug "Version suffix unavailable. Using \"latest\" by default: $module"
    esac

    x_="$___X_CMD_ROOT_MOD/$module"
    [ -f "$x_" ] || {
        x:error --tgt "$TGT" --mod "$module" "Module not found in ___x_cmd_which_one()"
        return "$x_EX_FILENOTFOUND"
    }
}

# hub just for hub
______x_cmd_hub_which(){
    :
}

# local, http, hub
______x_cmd_which(){

    case "$1" in
        http://*|https://*)
            ;;
        *:*)
            ;;
        */*)
            # local file
            ;;
        *)

            ;;
    esac

    if [ -d "$___X_CMD_ROOT_MOD/$1" ]; then
        x_type=module
        x_="$1/latest"
    fi

    # just for the x-cmd, hub, local file, and http service
}
