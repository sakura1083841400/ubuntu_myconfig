# shellcheck shell=dash disable=2016

___x_cmd_uptime___main(){
    [ "$#" -gt 0 ] || set -  --yml

    local op="$1"; shift
    case "$op" in
        --help|-h)
            ___x_cmd help -m uptime ;;
        --yml)
            ___x_cmd_uptime___cmd_yml ;;
        *)
            ___x_cmd_uptime___cmd_raw "$op" "$@" ;;
    esac
}


___x_cmd_uptime___cmd_raw(){
    if ___x_cmd hascmd uptime; then
        ___x_cmd_uptime___cmd_raw(){
            ___x_cmd_cmds uptime "$@"
        }
    elif ___x_cmd hascmd busybox && ___x_cmd_cmds busybox uptime 2>/dev/null 1>&2; then
        ___x_cmd_uptime___cmd_raw(){
            ___x_cmd_cmds busybox uptime
        }
    else
        ___x_cmd_uptime___cmd_raw(){
            ___x_cmd cosmo uptime "$@"
        }
    fi

    ___x_cmd_uptime___cmd_raw "$@"
}

___x_cmd_uptime___cmd_yml(){
    local NO_COLOR="$NO_COLOR"
    { [ -t 1 ] && ___x_cmd_is_interactive; } || NO_COLOR=1
    ___x_cmd_uptime___cmd_raw 2>/dev/null | ___x_cmd_cmds awk -v NO_COLOR="$NO_COLOR" '
    BEGIN{
        if (NO_COLOR != 1) {
            UI_KEY = "\033[36m"
            UI_VAL = "\033[32m"
            UI_END = "\033[0m"
        }
    }

    function str_trim(astr){
        gsub(/^[ \t\b\v\n]+/, "", astr)
        gsub(/[ \t\b\v\n]+$/, "", astr)
        return astr
    }

    match($0, " (user|users), ") {
        ls = substr($0, 1, RSTART-1)
        rs = substr($0, RLENGTH+1)

        match(ls, " up ")
        ct = substr(ls, 1, RSTART-1)
        st = substr(ls, RSTART+RLENGTH)
        match(st, ", [^,]+$")
        un = substr(st, RSTART+2)
        st = substr(st, 1, RSTART-1)

        la = match(rs, "load average(s)?: ")
        la = substr(rs, RSTART+RLENGTH)
        split(la, la_arr, "(, | )")

        gsub("(^[ ]+)|([ ]+$)", "", ct)

        printf(UI_KEY "%-15s"   UI_END "  :  " UI_VAL "%s\n"    UI_END,     "Current-time"      , str_trim(ct) )
        printf(UI_KEY "%-15s"   UI_END "  :  " UI_VAL "%s\n"    UI_END,     "System-uptime"     , str_trim(st) )
        printf(UI_KEY "%-15s"   UI_END "  :  " UI_VAL "%s\n"    UI_END,     "Number-of-users"   , str_trim(un) )
        printf(UI_KEY "%-15s"   UI_END "  :\n" UI_END,                      "Load-average" )
        printf(UI_KEY "  %-8s"  UI_END "  :  " UI_VAL "%6s\n"    UI_END,     "1-min"            , str_trim(la_arr[1]) )
        printf(UI_KEY "  %-8s"  UI_END "  :  " UI_VAL "%6s\n"    UI_END,     "5-min"            , str_trim(la_arr[2]) )
        printf(UI_KEY "  %-8s"  UI_END "  :  " UI_VAL "%6s\n"    UI_END,     "15-min"           , str_trim(la_arr[3]) )
    }
    '
}
