# shellcheck shell=dash


___X_CMD_LOG_OUTFILE=""
___x_cmd_log_0(){
    if [ -z "$___X_CMD_LOG_OUTFILE" ]; then
        ___x_cmd_log_0_ "$@"
    else
        ___x_cmd_log_0_ 2>"$___X_CMD_LOG_OUTFILE"
    fi
}

___x_cmd_log_0_(){
    local IFS=" "

    # ${___X_CMD_TRACE_LINE_LOCAL+<${___X_CMD_TRACE_LINE_LOCAL#"$O"}>
    local track="${___X_CMD_TRACE_LINE_LOCAL}"
    [ -z "$track" ] || track="<${track#"$O/"}>"

    local x_=""
    case "$1" in
        -*)         ___x_cmd_log_0_advanced_ "$@" ;;
        *)          x_="$*" ;;
    esac

    local pid_list_str=""
    [ -z "${___X_CMD_LOG_YML_PID_LIST}" ] || pid_list_str=" $___X_CMD_LOG_YML_PID_LIST"

    local timestamp=""
    [ -z "$___X_CMD_LOG__TIMESTAMP_FORMAT" ] || timestamp=" $(___x_cmd_cmds date "${___X_CMD_LOG__TIMESTAMP_FORMAT}")"

    if [ -n "$___X_CMD_LOG_C_TF" ] || [ -t 2 ]; then
        [ -z "$timestamp" ] || timestamp="${___X_CMD_LOG_C_TIMESTAMP_BEGIN}${timestamp}${___X_CMD_LOG_C_TIMESTAMP_END}"
        printf  "%s${timestamp}%s ${C}${C_BG}%s\033[0m${C}|%s$track: ${C_MSG}%s\033[0m\n" \
                "${___X_CMD_LOG_YML_INDENT}-" "${pid_list_str}" "$L" "$O" "$x_"
    else
        printf  "%s${timestamp}%s %s|%s: %s\n" \
                "${___X_CMD_LOG_YML_INDENT}-" "${pid_list_str}" "$L" "$O" "$x_"
    fi >&2
}

# x:error -c "$code" -t "error-tag" --time "$time" -e os,arch,abc
# x:error -e "$error-tag" -m "error msg" -c "$code" --time "$time" -e os,arch,abc

# Using outerr to record the
# x log run :scotty -- cmd1 arg1 arg2 arg3
# Using outerr to record, then make into the log stream


# TODO: ....
# TODO: x_log_pr_help
# TODO: x_log_pr_code
# TODO: x_log_pr_code

___x_cmd_log_0_advanced_(){
    local code=     # single line
    local more=
    local help=     # single line.

    local sub=

    local str_more="more:"
    if [ -n "$___X_CMD_LOG_C_TF" ] || [ -t 2 ]; then
        str_more="${___X_CMD_UNSEENCHAR_033}[36m${str_more}${___X_CMD_UNSEENCHAR_033}[0m"
    fi

    while [ $# -gt 0 ]; do
        case "$1" in
            -c)
                    code="${2}"
                    shift 2 || return ;;
            -h)
                    help="${2}"
                    shift 2 || return ;;
            --m:*)
                    ___X_CMD_LOG_0_INDENT="${___X_CMD_LOG_YML_INDENT}    "\
                        ___x_cmd_log_0_ml_ "${2}"
                    more="${more}${___X_CMD_LOG_YML_INDENT}    ${1#--m:}: ${x_}
"
                    shift 2 || return
                    x_=
                    ;;
            -m)     ___X_CMD_LOG_0_INDENT="${___X_CMD_LOG_YML_INDENT}  " \
                    ___x_cmd_log_0_ml_ "$2"

                    shift 2 || return
                    ;;

            --y:*)
                    ___X_CMD_LOG_0_INDENT="${___X_CMD_LOG_YML_INDENT}    "\
                        ___x_cmd_log_0_yml_ "${2}"
                    more="${more}${___X_CMD_LOG_YML_INDENT}    ${1#--y:}: ${x_}
"
                    shift 2 || return
                    x_=
                    ;;
            -y)     ___X_CMD_LOG_0_INDENT="${___X_CMD_LOG_YML_INDENT}  " \
                    ___x_cmd_log_0_yml_ "$2"

                    shift 2 || return
                    ;;

            -S)
                    sub="S:"
                    shift 1
                    ;;
            --)     break ;;
            --*)
                    more="${more}${___X_CMD_LOG_YML_INDENT}    ${1#--}: ${2}
"
                    shift 2 || return
                    ;;
            *)      break;;
        esac
    done

    [ -z "$1" ] || x_="${x_}${1}"

    [ -z "$help" ] || {
        local str_help="help:"
        if [ -n "$___X_CMD_LOG_C_TF" ] || [ -t 2 ]; then
            str_help="${___X_CMD_UNSEENCHAR_033}[31m${str_help}${___X_CMD_UNSEENCHAR_033}[0m"
        fi
        x_="$x_
${___X_CMD_LOG_YML_INDENT}  ${str_help} ${help}"
    }

    [ -z "$code" ] || {
        local str_code="code:"
        if [ -n "$___X_CMD_LOG_C_TF" ] || [ -t 2 ]; then
            str_code="${___X_CMD_UNSEENCHAR_033}[36m${str_code}${___X_CMD_UNSEENCHAR_033}[0m"
        fi
        # TODO: If code not eq 0, use red color.
        x_="$x_
${___X_CMD_LOG_YML_INDENT}  ${str_code} ${code}"
    }

    [ -z "$more" ] || {
        local str_more="more:"
        if [ -n "$___X_CMD_LOG_C_TF" ] || [ -t 2 ]; then
            str_more="${___X_CMD_UNSEENCHAR_033}[36m${str_more}${___X_CMD_UNSEENCHAR_033}[0m"
        fi
        # TODO: colorize key
        x_="${x_}
${___X_CMD_LOG_YML_INDENT}  ${str_more}
${more%?}"
    }

    [ -z "$sub" ] || {
        x_="${x_}
${___X_CMD_LOG_YML_INDENT}  S:"
    }
}

# Mode: multiple line mode
___x_cmd_log_0_ml_(){
    local indent="${___X_CMD_LOG_0_INDENT}  ";  x_="|"
    local line; while IFS= read -r line; do
        x_="${x_}
${indent}${line}"
    done <<A
$1
A
}

___x_cmd_log_0_yml_(){
    local indent="${___X_CMD_LOG_0_INDENT}  ";  x_=""
    local line; while IFS= read -r line; do
        if [ -z "$x_" ]; then
            x_="${line} "
        else
            x_="${x_}
${indent}${line}"
        fi
    done <<A
$1
A
}

