# shellcheck shell=dash
# Section: level

___x_cmd_log_level_name(){
    case "${1:?Provide name}" in
        d|debug|1)  level_name=debug ;;
        i|info|2)   level_name=info ;;
        w|warn|3)   level_name=warn ;;
        e|error|4)  level_name=error ;;
        n|none|5)   level_name=none ;;
        *)          level_name=info ;;
    esac
}

___x_cmd_log_level_name_to_level_code(){
    case "${1:?Provide name}" in
        debug)      level_code=1 ;;
        info)       level_code=2 ;;
        warn)       level_code=3 ;;
        error)      level_code=4 ;;
        none)       level_code=5 ;;
        *)          level_code=2 ;;
    esac
}

___x_cmd_log_level_code_to_level_name(){
    case "${1:?Provide code}" in
        1)      level_name=debug ;;
        2)      level_name=info ;;
        3)      level_name=warn ;;
        4)      level_name=error ;;
        5)      level_name=none ;;
        *)      level_name=info ;;
    esac
}

___x_cmd_log_unset_level(){
    x:trace x/log
    local logger_name="${1:?Provide loggername}"

    # TODO: how to check the logger_name is valid?
    if ! ___x_cmd_validenvname "${logger_name}"; then
        ___x_cmd_log_pr x error "Logger Name should be match [0-9A-Za-z_]+ "
        return 1
    fi

    eval "___X_CMD_LOG__${logger_name}="
}

___x_cmd_log_set_level(){
    x:trace x/log
    local logger_name="${1:?Provide loggername}"

    # TODO: how to check the logger_name is valid?
    if ! ___x_cmd_validenvname "${logger_name}"; then
        ___x_cmd_log_pr x error "Logger Name should be match [0-9A-Za-z_]+ "
        return 1
    fi

    local level_name
    ___x_cmd_log_level_name "${2:?Provide level}"

    local level_code="${3}"

    if [ -z "$level_code" ]; then
        ___x_cmd_log_level_name_to_level_code "$level_name"
    fi

    local var="___X_CMD_LOG__${logger_name}"

    if eval test -z "\$___X_CMD_LOG__0_$logger_name"; then
        eval "$var=$level_code"
    else
        eval "$var=$level_code"
        if [ -d "$___X_CMD_ROOT/$logger_name" ]; then
            ___x_cmd_log_pr "${O:-$logger_name}" warn "Reload the logger by reload the module: xrc:mod \"$logger_name/latest\""
            # xrc:mod "$logger_name/latest"
        fi
    fi

    # eval "$O:debug  \"Level of logger [\$logger_name] is set to [\$level]\""
    ___x_cmd_log_pr x info "Level of logger [$logger_name] is set to [$level_name]"
}

___x_cmd_log_get_level_name(){
    # local level_name
    eval ___x_cmd_log_level_code_to_level_name "\$___X_CMD_LOG__${1:?Provide logger name}"
    # printf "%s" "$level_name"
}

___x_cmd_log_show_level(){
    local level_name
    while [ $# -gt 0 ]; do
        eval ___x_cmd_log_level_code_to_level_name "\$___X_CMD_LOG__$1"
        printf "%s = %s\n" "$1" "$level_name"
        shift
    done
}

___X_CMD_LOG_LEVEL_DEFAULT=2
___x_cmd_log_level_default(){
    case "${1:?Provide name}" in
        d|debug|1)  ___X_CMD_LOG_LEVEL_DEFAULT=1 ;;
        i|info|2)   ___X_CMD_LOG_LEVEL_DEFAULT=2 ;;
        w|warn|3)   ___X_CMD_LOG_LEVEL_DEFAULT=3 ;;
        e|error|4)  ___X_CMD_LOG_LEVEL_DEFAULT=4 ;;
        n|none|5)   ___X_CMD_LOG_LEVEL_DEFAULT=5 ;;
        *)
            ___x_cmd_log_pr x error "Fail to set default level for unknown [level name=$1]"
            return 1
    esac
}

## EndSection
