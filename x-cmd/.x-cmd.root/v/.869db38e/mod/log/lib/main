# shellcheck shell=dash

xrc:mod:lib     log         trace level store printer0 printer sub run exec uirotate

___x_cmd_log___return(){
    [ -n "$N" ] || return 1
    [ -n "$M" ] || return 1
    x log :"${N#:}" error -m "$M"
    return 1
}

# Ensure 130 is returned ...
___x_cmd_log___return_auto(){
    [ -n "$N" ] || return 1
    [ -n "$M" ] || return 1
    ___x_cmd_log_pr :"${N#:}" error -m "$M"

    case "$E" in
        130)        return 130   ;;
        *)          return 1     ;;
    esac
}

alias log:return='E="$?" ___x_cmd_log___return_auto || return'
alias log:panic='E="$?" ___x_cmd_log___return_auto || return'

alias log:exit='___x_cmd_log___return || exit'

# NOTICE: delibrate using || and enforce ___x_cmd_log___return return non-zero exit code
alias log:ret:1='___x_cmd_log___return || return 1 2>/dev/null || exit 1'
alias log:ret:64='___x_cmd_log___return || return 64 2>/dev/null || exit 64'

___x_cmd_log___main() {
    case "$1" in
        :*)                                     ___x_cmd_log_pr "$@" ;;
        "")                                     ___x_cmd_log_recent; return 0 ;;
        -h|--help)                  shift;      x help -m log  1>&2; return 1 ;;

        recent)                     shift;      ___x_cmd_log_recent "$@" ;;

        init)                       shift;      ___x_cmd_log_init "$@" ;;
        init1)                      shift;      ___x_cmd_log_init1 "$@" ;;

        init0)                      shift;      ___x_cmd_log_init0 "$@" ;;
        init01)                     shift;      ___x_cmd_log_init01 "$@" ;;
        init02)                     shift;      ___x_cmd_log_init02 "$@" ;;

        redirect)                   shift;      ___x_cmd_log_redirect "$@" ;;

        timestamp)                  shift;      ___x_cmd_log_timestamp "$@" ;;
        view)                       shift;      ___x_cmd_log_view "$@" ;;
        vis)                        shift;      x logvis "$@" ;;

        exec)                       shift;      ___x_cmd_log_exec "$@" ;;

        sub)                        shift;      ___x_cmd_log_sub "$@" ;;
        run)                        shift;      ___x_cmd_log_run "$@" ;;
        default)                    shift;      ___x_cmd_log_level_default "$@" ;;

        uirotate)                   shift;      ___x_cmd_log_uirotate "$@" ;;
        *)                                      ___x_cmd_log_default "$@" ;;
    esac
}

# Section: timestamp help
___x_cmd_log_timestamp(){
    local arg="${1:?Provide timestamp}"
    case "$arg" in
        on)     ___X_CMD_LOG__TIMESTAMP_FORMAT="+%H:%M:%S" ;;
        off)    ___X_CMD_LOG__TIMESTAMP_FORMAT= ;;
        *)      printf "Try customized timestamp format wit date command:\n"
                ___x_cmd_cmds date "$arg" || return 1
                ___X_CMD_LOG__TIMESTAMP_FORMAT="$arg"
    esac
}
## EndSection

# Section: redirect view

___x_cmd_log_redirect(){
    local folder="$___X_CMD_ROOT_TMP/log/$$"
    x mkdirp "$folder"
    "$@" 2>"$folder/$(___x_cmd_cmds date +%s)"
}

___x_cmd_log_view(){
    ___x_cmd_cmds_awk -f "$___X_CMD_ROOT_MOD/log/lib/view.awk"
}

# EndSection

# Section: init regular log for Application Module
___x_cmd_log_init1(){
    ___x_cmd_log_init_inner "$@" 1
}

___x_cmd_log_init(){
    ___x_cmd_log_init_inner "$@" 1 2 3 4
}

___x_cmd_log_init_inner(){
    local logger_name="${1:?Provide logger name}"
    shift

    local var="___X_CMD_LOG__$logger_name"

    local code="
$var=\${$var:-2}
___X_CMD_LOG__0_$logger_name=

${logger_name}_log(){     ___x_cmd_log_pr $logger_name \"\$@\";   }
"

    local level_name
    local level_code; for level_code in "$@"; do
        ___x_cmd_log_level_code_to_level_name "$level_code"
        code="$code
alias ${logger_name}:$level_name='test -z \"\$___X_CMD_LOG_DEBUG\" -a $level_code -lt \"\${___X_CMD_LOG__${logger_name}:-2}\" || O=${logger_name} ___x_cmd_log_pr_${level_name}'
"
    done

    eval "$code"
}

## EndSection

# Section: zero cost log for High Efficiency Module. Like str, list, dict: DEBUG
___x_cmd_log_init0(){       # DEBUG + INFO + WARN + ERROR: For those module
    ___x_cmd_log_init0_inner "$@" 1 2 3 4
}

___x_cmd_log_init01(){      # DEBUG
    ___x_cmd_log_init0_inner "$@" 1
}

___x_cmd_log_init02(){      # DEBUG + INFO
    ___x_cmd_log_init0_inner "$@" 1 2
}

___x_cmd_log_init0_inner(){
    local logger_name="${1:?Provide logger name}"
    shift
    local var="___X_CMD_LOG__$logger_name"

    eval "$var=\${$var:-2}"
    eval "___X_CMD_LOG__0_$logger_name=1"

    local level_target_code
    eval level_target_code="\${$var}"


    local level_name
    local level_code; for level_code in "$@"; do
        ___x_cmd_log_level_code_to_level_name "$level_code"
        if [ "$level_code" -lt "$level_target_code" ]; then
            alias "${logger_name}:${level_name}"=" : # "
        else
            alias "${logger_name}:${level_name}"="O=${logger_name} ___x_cmd_log_pr_${level_name}"
        fi
    done

    eval "$var=$level_code"
}

## EndSection

___x_cmd_log_init log
xrc:mod:lib     log         recent
