# shellcheck shell=dash


___x_cmd_gh_model_ls(){
    local op="$1"
    case "$op" in
        -h|--help)
            ___x_cmd help -m gh model ls ;;
        --csv|--app)
            shift; ___x_cmd_gh_model_ls___"${op#--}" "$@" ;;
        --advise)
            shift; ___x_cmd_gh_model_ls___advise "$@" ;;
        *)
            if [ -t 1 ] && ___x_cmd_is_interactive ; then
                ___x_cmd_gh_model_ls___app
            else
                ___x_cmd_gh_model_ls___raw
            fi
    esac
}

___x_cmd_gh_model_ls___csv(){
    local x_; ___x_cmd_gh_model_ls___which_ || return
    < "$x_" ___x_cmd ja 2c .name .task .publisher .summary .tags .license .id | \
        ___x_cmd csv header --add Name,Task,Publisher,Summary,Tags,Lincense,Id
}

___x_cmd_gh_model_ls___advise(){
    local x_; ___x_cmd_gh_model_ls___which_ || return
    < "$x_" ___x_cmd ja 2c .name
}

___x_cmd_gh_model_ls___app_inner(){
    x_=""
    local ___X_CMD_CSV_APP_DATA_CURROW=
    ___x_cmd csv app --clear --return line --continue gh-model <<A || return
$( ___x_cmd_gh_model_ls___csv )
A
    x_="${___X_CMD_CSV_APP_DATA_CURROW%%,*}"
    [ -n "$x_" ]
}

___x_cmd_gh_model_ls___app(){
    local cur_model=
    ___x_cmd_gh_cur cur_model:=ai_model 2>/dev/null
    gh:info "Set the default Github model, currently using [model=${cur_model:-"$____X_CMD_GH_MODEL_DEFAULT_NAME"}]"
    local x_=; ___x_cmd_gh_model_ls___app_inner || return
    gh:info "Setting the default [model=$x_]"
    ___x_cmd_gh_cfg set ai_model="$x_"
}

___x_cmd_gh_model_ls___which_(){
    x_=""
    local file="$___X_CMD_ROOT_DATA/gh/model/data.json"
    local tmpfile="${file}.tmp"
    [ -f "$file" ] || {
        ___x_cmd_gh_repo_file download --repo x-cmd/gh --ref main --yes data/model.yml "$tmpfile" || return
        < "$tmpfile" ___x_cmd y2j > "$file"
        [ -f "$file" ] || return
        ___x_cmd rmrf "$tmpfile"
    }
    x_="$file"
}
