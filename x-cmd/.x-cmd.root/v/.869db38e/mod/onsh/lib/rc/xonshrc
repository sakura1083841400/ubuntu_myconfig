
# This will only invoked when xonsh is activate on interactive mode ...
import re
import os
import random
import shutil

def ___x_cmd___rcxonsh_addp(arg_path):
    if arg_path not in __xonsh__.env['PATH']:
        __xonsh__.env['PATH'].insert(0, arg_path)

def ___x_cmd___rcxonsh_addpifh(cmd_name, arg_path):
    if shutil.which(cmd_name):
        ___x_cmd___rcxonsh_addp(arg_path)

def ___x_cmd___rcxonsh_addpifd(arg_path):
    if os.path.isdir(arg_path):
        ___x_cmd___rcxonsh_addp(arg_path)

def ___x_cmd___rxonsh_addpython():
    ___x_cmd___rcxonsh_addpifh("python", "$HOME/.local/bin")

    xcmd_sphere = os.path.expanduser("~/.x-cmd.root/local/data/pkg/sphere/X")
    singleton_file= xcmd_sphere + '/.x-cmd/singleton/python'

    if os.path.exists(singleton_file):
        with open(singleton_file, 'r') as f:
            content = f.read().strip()
        if os.name == 'nt':
            binpath= xcmd_sphere + '/' + content + '/Scripts'
        else:
            binpath= xcmd_sphere + '/' + content + '/bin'

        if binpath in __xonsh__.env['PATH']:
            __xonsh__.env['PATH'].remove(binpath)
        __xonsh__.env['PATH'].insert(0, binpath)


if os.path.isfile("$HOME/.x-cmd.root/ctrl/pixi"):
    __xonsh__.env['PATH'].insert(-1, "$HOME/.pixi/bin")

___x_cmd___rcxonsh_addp("$HOME/.x-cmd.root/bin")
___x_cmd___rcxonsh_addp("$HOME/.x-cmd.root/local/data/pkg/sphere/X/l/j/h/bin")

___x_cmd___rcxonsh_addpifd("$HOME/.cargo/bin")
___x_cmd___rcxonsh_addpifh("go","$HOME/go/bin")
___x_cmd___rcxonsh_addpifh("deno","$HOME/.deno/bin")
___x_cmd___rcxonsh_addpifh("bun","$HOME/.bun/bin")
___x_cmd___rcxonsh_addpifh("npm","$HOME/.npm/bin")
___x_cmd___rxonsh_addpython()


# xonsh defaults all variables exported
$___X_CMD_IS_INTERACTIVE_FORCE = 1
$___X_CMD_THEME_RELOAD_DISABLE = 1

$___X_CMD_CD_RELM_0 = $PWD

___x_cmd_xonsh___bin_suffix = ''
if os.name == 'nt':
    ___x_cmd_xonsh___bin_suffix = '.bat'
xbinexp = f"$HOME/.x-cmd.root/bin/___x_cmdexe_exp{___x_cmd_xonsh___bin_suffix}"

def ___x_cmd_xonsh_x(args):
    $___X_CMD_XBINEXP_FP = $HOME + "/.x-cmd.root/local/data/xbinexp/onsh/"  + str(os.getpid()) + "_" + str(random.randint(0,32767))
    # mkdir -p $___X_CMD_XBINEXP_FP

    $___X_CMD_XBINEXP_EVAL = ""
    $___X_CMD_XBINEXP_INITENV_OLDPWD = $OLDPWD

    # xbinexp @(args)
    if r := ![ xbinexp @(args) ] :
        ___exit_code = r.returncode
    else:
        ___exit_code = 1

    if not os.path.isdir( $___X_CMD_XBINEXP_FP ):
        return ___exit_code

    for posixfp in gp`$___X_CMD_XBINEXP_FP/*_*`:
        value = open(posixfp).read()
        name = re.sub(r"^[^_]*_", "", posixfp.name)
        if name == "PWD":
            if os.name == 'nt':
                win_path = re.sub(r'^/([a-zA-Z])/', r'\1:\\', value).replace('/', '\\')
                if win_path:
                    value = win_path
            cd @(value)
        else:
            ${...}[name] = value

    if "onsh" in $___X_CMD_XBINEXP_FP:
        # dangerous
        rm -rf "$___X_CMD_XBINEXP_FP"

    if "___X_CMD_XBINEXP_EVAL" in ${...} and $___X_CMD_XBINEXP_EVAL != "":
        evalx_cmd = $___X_CMD_XBINEXP_EVAL
        del ${...}["___X_CMD_XBINEXP_EVAL"]
        evalx( evalx_cmd )

    return ___exit_code

aliases['xbin'] = ___x_cmd_xonsh_x

aliases['___x_cmd'] = f"$HOME/.x-cmd.root/bin/___x_cmdexe_exp{___x_cmd_xonsh___bin_suffix}"
aliases['x'] = f"$HOME/.x-cmd.root/bin/___x_cmdexe_exp{___x_cmd_xonsh___bin_suffix}"        # ___x_cmd_xonsh_x

def ___x_cmd_xonsh_c(args):
    len_of_args = len(args)
    if len_of_args == 0:
        xbin cd
        return

    if len_of_args == 1:
        arg1 = args[0]
        if arg1 == "-":
            cd $OLDPWD
            return
        if arg1 == "~":
            cd ~
            return

        if os.path.isdir(arg1):
            cd @(arg1)
            return

    xbin cd @(args)


def ___x_cmd_xonsh_chat_agent_func( args ):
    $___X_CMD_CHAT_NORMAL_ALIAS = args[0]
    x chat "--send" @(args[1:])

def ___x_cmd_xonsh_writer_agent_func( args ):
    $___X_CMD_DEFAULT_LANGUAGE = args[0]
    x writer @(args[1:])

aliases['___x_cmd_xonsh_agent_chat']    = ___x_cmd_xonsh_chat_agent_func
aliases['___x_cmd_xonsh_agent_writer']  = ___x_cmd_xonsh_writer_agent_func

# x chat
aliases['@']            = [ "___x_cmd_xonsh_agent_chat", "" ]
aliases['@l']           = [ "___x_cmd_xonsh_agent_chat", "l" ]
aliases['@lms']         = [ "___x_cmd_xonsh_agent_chat", "lms" ]
aliases['@o']           = [ "___x_cmd_xonsh_agent_chat", "o" ]

aliases['@gpt']         = [ "___x_cmd_xonsh_agent_chat", "gpt" ]
aliases['@gpt3']        = [ "___x_cmd_xonsh_agent_chat", "gpt3" ]
aliases['@gpt4']        = [ "___x_cmd_xonsh_agent_chat", "gpt4" ]
aliases['@gpt4t']       = [ "___x_cmd_xonsh_agent_chat", "gpt4t" ]
aliases['@gpt4om']      = [ "___x_cmd_xonsh_agent_chat", "gpt4om" ]
aliases['@gpto1']       = [ "___x_cmd_xonsh_agent_chat", "gpto1" ]
aliases['@gpto1m']      = [ "___x_cmd_xonsh_agent_chat", "gpto1m" ]
aliases['@gh']          = [ "___x_cmd_xonsh_agent_chat", "gh" ]
aliases['@gemini']      = [ "___x_cmd_xonsh_agent_chat", "gemini" ]
aliases['@mistral']     = [ "___x_cmd_xonsh_agent_chat", "mistral" ]
aliases['@kimi']        = [ "___x_cmd_xonsh_agent_chat", "kimi" ]

# x writer
aliases['@zh']          = [ "___x_cmd_xonsh_agent_writer", "zh" ]
aliases['@en']          = [ "___x_cmd_xonsh_agent_writer", "en" ]


if __xonsh__.env.get('XONSH_INTERACTIVE'):
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/c.disable"):
        aliases['c']            = ___x_cmd_xonsh_c
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/xx.disable"):
        aliases["xx"]           = [ "___x_cmd", "xx" ]
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/xw.disable"):
        aliases["xw"]           = [ "___x_cmd", "ws" ]
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/xd.disable"):
        aliases["xd"]           = [ "___x_cmd", "docker" ]
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/xg.disable"):
        aliases["xg"]           = [ "___x_cmd", "git" ]
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/xp.disable"):
        aliases["xp"]           = [ "___x_cmd", "pwsh" ]
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/xwt.disable"):
        aliases["xwt"]          = [ "___x_cmd", "webtop" ]

    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/co.disable"):
        aliases[',']            = [ "xbin", "onsh", "--sysco" ]
        aliases['，']           = [ "xbin", "onsh", "--sysco" ]
    if not os.path.isfile("$HOME/.x-cmd.root/boot/alias/coco.disable"):
        aliases[',,']           = [ "xbin", "onsh", "--syscoco" ]
        aliases['，，']         = [ "xbin", "onsh", "--syscoco" ]

# advise
if __xonsh__.env.get('___X_CMD_ADVISE_ACTIVATION_ON_NON_POSIX_SHELL') == '1':
    from xonsh.completers.completer import add_one_completer
    from xonsh.completers.tools import contextual_command_completer

    @contextual_command_completer
    def ___x_cmd_advise_run_onsh(context):
        from json import loads
        from xonsh.completers.tools import sub_proc_get_output, RichCompletion

        advise_bootcode = "$HOME/.x-cmd.root/local/cache/advise/bootcode/v0.0.0.onsh"
        if not os.path.exists(advise_bootcode):
            output, _ = sub_proc_get_output(
                'bash', "x", 'advise', 'complete', 'onsh', *[a.value for a in context.args], context.prefix.translate(str.maketrans('', '', '\'"'))
            )
            if not output:
                return
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, 'w') as f:
                f.write(output)

        with open(singleton_file, 'r') as f:
            output = f.read().strip()
        for c in loads(output):
            yield RichCompletion(
                c["Value"],
                display=c["Display"],
                description=c["Description"],
                prefix_len=len(context.raw_prefix),
                append_closing_quote=False,
                style=c["Style"],
            )

    add_one_completer('advise', ___x_cmd_advise_run_onsh, 'start')

