# shellcheck shell=dash

# x-cmd.engine: <python|node|ts-node|java|kotlin|groovy|r|julia|ruby|perl>
# x-cmd.setup:  <code>
# x-cmd.mode: <inplace|ws>
# x-cmd.end:

___x_cmd_solo___parse(){
    local x_engine
    local x_setup
    local x_mode

    ___x_cmd_solo___parse_ "$1" || return
    printf "engine: %s\n" "$x_engine"
    printf "setup: %s\n"  "$x_setup"
    printf "mode: %s\n"   "$x_mode"
}

___x_cmd_solo___parse_(){
    x_engine=
    x_setup=
    x_mode=
    x_dependency=
    local filepath="$1"; shift

    case "$filepath" in
        *\.yml|*\.json)
            x_engine="${filepath##*.}"
            return
            ;;
    esac

    local line; local i=0;
    while read -r line; do
        i=$((i+1)); [ "$i" -lt 10 ] || break
        case "$line" in
            *x-cmd.*:*)
                { ___x_cmd_solo___parse_main_ || return ;} <<A
$line
$(___x_cmd_cmds_cat)
A
            break
            ;;
            *)  continue
        esac
    done < "$filepath"
    # If there is not engine declaration, the file will run directly.
    return 0
}

___x_cmd_solo___parse_main_(){
    local line
    while read -r line; do
        case "$line" in
            *x-cmd.engine:*)
                x_engine=${line##*:*" "}
                x_engine=${x_engine%%" "*}
                case "${x_engine}" in
                    python|node|deno|ts-node|java|kotlin|groovy|r|julia|ruby|perl|source)
                        ;;
                    *)
                        solo:error "Engine not found ==> $x_engine"
                        return 1
                esac
                ;;
            *x-cmd.mode*:*)
                x_mode=${line#*:*" "}
                x_mode=${x_mode%%" "*}
                case "${x_mode}" in
                    inplace|ws)
                        ;;
                    *)
                        solo:error "Mode not found ==> ${x_mode}"
                        return 1
                esac
                ;;
            *x-cmd.setup*:*)
                line="${line#*:}"
                x_setup="${x_setup}${line}${___X_CMD_UNSEENCHAR_NEWLINE}"

                solo:debug "setup=$line"
                # Put the code into a seperate directory
                ;;
            *x-cmd.end*)
                break
            ;;

            *)  continue
        esac
    done
}
