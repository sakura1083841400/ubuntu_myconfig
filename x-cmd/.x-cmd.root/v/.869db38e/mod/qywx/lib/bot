# shellcheck shell=dash disable=SC2016,2034,2154

# reference: https://developer.work.weixin.qq.com/document/path/91770#%E6%96%87%E6%9C%AC%E7%B1%BB%E5%9E%8B

# Section(inner): endpoint, send_json
___x_cmd_qywx_bot___send_json() {
    local x_=;  local request="$1";  [ -n "$1" ] || request="$(___x_cmd_cmds_cat)"
    request="$( printf "%s\n" "$request" | x jo n | x jo t " " )"
    ___x_cmd_qywx_cur --get_ webhook
    [ -n "$x_" ] || {
        qywx:error "Please setting up your webhook first ==> 'x qywx --cfg webhook=<your webbook url>'"
        return 1
    }
    qywx:debug  --webhook "$x_" --request "$request"
    ___x_cmd_http post json "$x_" "$request"
}
# EndSection

___x_cmd_qywx_bot(){
    param:subcmd ___x_cmd_qywx_bot    \
        send   "send msg"             

    param:subcmd:try
    param:run
    qywx:error "Subcommand required"
    ___x_cmd_qywx help
}

___x_cmd_qywx_bot_send() {
    param:subcmd ___x_cmd_qywx_bot_send       \
        --text             "send text"        \
        --markdown         "send markdown"    \
        --image            "send image"       \
        --raw              "send raw json"    \
        --news             "send news"        \
        --file             "send file"           
        # --textcard         "send textcard"        
        # --newscard         "send newscard"

    param:subcmd:try
    param:run

    ___x_cmd_qywx_bot_send_text "$@"    

}
___x_cmd_qywx_bot_send_text() {
    param:scope     qywx
    param:dsl <<A
option:
    #1                           "Provide text"      <content>:text
    --mentioned_list             "A list of userids to alert specified members of the group"                                                <>:userid=""
    --mentioned_mobile_list      "List of mobile phone numbers, reminding group members corresponding to mobile phone numbers"              <>:phone_number=""
    --json|-j                    "output origin json data"
A
    param:run
    
    local text="$1"
    local res=; res="$(___x_cmd_qywx_bot___send_json '
{
    "msgtype": "text",
    "text": {
        "content": '"$( ___x_cmd_qywx_jqu "$text" )"',
        "mentioned_list":[ '"${mentioned_list}"' ],
        "mentioned_mobile_list":[ '"${mentioned_mobile_list}"' ]
    }
}
'
)"  || return
    local format=; format="${json:+json}"
    ___x_cmd_qywx____ui_utils "$res" "Sent text successfully" "$format"
}

___x_cmd_qywx_bot_send_raw() {
    param:scope             qywx
    param:dsl <<A
option:
    #1            "Provide raw json(If #1 is '-', the json is read from stdin)"      <raw>:json
    --json|-j     "output origin json data"
A
    param:run

    local raw="${1}"; [ "$raw" != "-" ] || raw="$(___x_cmd_cmds_cat)"
    local res=; res="$(___x_cmd_qywx_bot___send_json "$raw")" || return
    local format=; format="${json:+json}"
    ___x_cmd_qywx____ui_utils "$res" "Sent message successfully" "$format"
}

___x_cmd_qywx_bot_send_markdown() {
    param:scope     qywx
    param:dsl <<A
option:
    #1              "Provide text"              <content>:text
    --json|-j       "output origin json data"
A
    param:run
    local text="$1"
    local res=; res="$(___x_cmd_qywx_bot___send_json '
{
    "msgtype": "markdown",
    "markdown": {
        "content": '"$( ___x_cmd_qywx_jqu "$text" )"'
    }
}
'
)"  || return
    local format=; format="${json:+json}"
    ___x_cmd_qywx____ui_utils "$res" "Sent markdown successfully" "$format"
}

___x_cmd_qywx_bot_send_image() {
    param:scope     qywx
    param:dsl <<A
option:
    --image_path    "Provide image path"    <image_path>:image_path
    --json|-j       "output origin json data"
A
    param:run
    [ -f "$image_path" ] || {
        qywx:error "Please provide image path"
        return 1
    }

    local md5=;     md5="$(x md5 "$image_path")"
    local base64=;  base64="$(x base64 -w 0 "$image_path")"
    local res=;     res="$(___x_cmd_qywx_bot___send_json '
{
    "msgtype": "image",
    "image": {
		"md5": '"$md5"',
        "base64": '"$( ___x_cmd_qywx_jqu "$base64" )"'
    }
}
'
)"  || return
    local format=; format="${json:+json}"
    ___x_cmd_qywx____ui_utils "$res" "Sent image successfully" "$format"
}

___x_cmd_qywx_bot_send_news() {
    param:scope     qywx
    param:dsl <<A
option:
    --articles|m        "Provide multiple action tag in following format [ <title> <description> <url> <picurl> ] " 
        <title>:text
        <description>:text
        <url>:url
        <picurl>:url
    --json|-j           "output origin json data"
A
    param:run
    local IFS="
"
    local title; local description ; local url ; local picurl ; local all
    for i in $(param_marg articles); do
        title=$(param_marg_get articles "$i" 1)
        description=$(param_marg_get articles "$i" 2)
        url=$(param_marg_get articles "$i" 3)
        picurl=$(param_marg_get articles "$i" 4)
        all="${all}${___X_CMD_UNSEENCHAR_NEWLINE}$(x jo dict "title:$title" "description:$description" "url:$url" "picurl:$picurl")"
    done
    local res=; res="$(___x_cmd_qywx_bot___send_json '
{
    "msgtype": "news",
    "news": {
        "articles" : [ '"$all"' ]
    }
}
'
)"  || return
    local format=; format="${json:+json}"
    ___x_cmd_qywx____ui_utils "$res" "Sent news successfully" "$format"
}


___x_cmd_qywx_bot_send_file() {
    param:scope     qywx
    param:dsl <<A
option:
    --media_id      "Provide file id"           <media_id>:media_id
    --json|-j       "output origin json data"
A
    param:run
    local res
    res="$(___x_cmd_qywx_bot___send_json <<A
{
    "msgtype": "file",
    "file": {
 		"media_id": "$media_id"
    }
}
A
)"  || return
    local format=; format="${json:+json}"
    ___x_cmd_qywx____ui_utils "$res" "Sent file successfully" "$format"
}


___x_cmd_qywx_bot_send_textcard() {
    : #TODO: https://developer.work.weixin.qq.com/document/path/91770#%E6%96%87%E6%9C%AC%E9%80%9A%E7%9F%A5%E6%A8%A1%E7%89%88%E5%8D%A1%E7%89%87
}


___x_cmd_qywx_bot_send_newscard() {
     : #TODO: https://developer.work.weixin.qq.com/document/path/91770#%E5%9B%BE%E6%96%87%E5%B1%95%E7%A4%BA%E6%A8%A1%E7%89%88%E5%8D%A1%E7%89%87
}

___x_cmd_qywx____ui_utils(){
    local res="$1"; local msg="$2"; local format="$3"
    [ -n "$res" ] || return
    case "$format" in
        json)   printf "%s\n" "$res" | x jo ; return ;;
        yml)    printf "%s\n" "$res" | x j2y ; return ;;
        *) ;;
    esac

    printf "%s" "$res" | x jo env . .errmsg -- '
        if [ "$errmsg" = "ok" ]; then
            ___x_cmd_ui_tf true "$msg"
        else
            ___x_cmd_ui_tf false "Failed to send message:" "ErrorMsg: $res"
            return 1 || exit 1
        fi
    '
}
