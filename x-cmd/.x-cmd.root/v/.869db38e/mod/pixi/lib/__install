# shellcheck shell=dash

___x_cmd_pixi___install(){
    if [ -f "$___X_CMD_PIXI_BIN_PATH/$___X_CMD_PIXI_BIN" ]; then
        pixi:info "pixi is already installed."
    else
        ___x_cmd_pixi___download_inner "$@" || return
    fi

    ___x_cmd_pixi___activate_auto
}

___x_cmd_pixi___uninstall(){
    {
        ___x_cmd_pixi___deactivate
        ___x_cmd rmrf "$___X_CMD_ROOT_BOOT/pixi.disable" "$___X_CMD_PIXI_BIN_PATH/$___X_CMD_PIXI_BIN"
    } || return

    pixi:info "Deleted 'pixi' binary, pixi uninstall successfully!"


    local pixi_home="$HOME/.pixi"
    if [ -t 1 ] && ___x_cmd_is_interactive; then
        ___x_cmd ui yesno "Delete $pixi_home directory?"  || return 0
        ___x_cmd rmrf "$pixi_home"
        pixi:info "Deleted $pixi_home directory."
    fi
}

___x_cmd_pixi___get_latest_version_(){
    local latest_version=
    if ___x_cmd websrc is cn;then
        latest_version="$(___x_cmd cb repo release latest -r x-cmd-sourcecode/pixi | grep "TagName:")"
    else
        latest_version="$(___x_cmd gh repo release latest -r x-cmd-sourcecode/pixi | grep "Tag:")"
    fi
    x_="${latest_version#*v}"
}

___x_cmd_pixi___upgrade(){
    [ -f "$___X_CMD_PIXI_BIN_PATH/$___X_CMD_PIXI_BIN" ] || {
        pixi:error "pixi is not installed."
        return 1
    }

    local version=
    version="$(___x_cmd_pixi___cmd --version)"
    version="${version#* }"

    local x_=
    local latest_version=
    x_=; ___x_cmd_pixi___get_latest_version_
    latest_version="$x_"

    [ "$version" != "$latest_version" ] || {
        pixi:info "Pixi is already up-to-date (version $version)."
        return 0
    }

    pixi:info "Pixi will be updated from $version to $latest_version"
    ___x_cmd_pixi___download || return
    pixi:info "Pixi has been updated to version $latest_version."
}
