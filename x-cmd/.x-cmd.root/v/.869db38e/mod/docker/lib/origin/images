# shellcheck shell=dash

___x_cmd_docker_images(){
    [ $# -gt 0 ]    || set -- --app

    local op="$1"; shift
    case "$op" in
        -h|--help)      ___x_cmd help -m docker images          ;;

        *)              ___x_cmd_docker_images_main "$op" "$@"  ;;
    esac
}

___x_cmd_docker_images_main(){
    local IMAGE_OPTS=
    local format=app
    while [ $# -gt 0 ]; do
        case "$1" in
            --app)      format=app;     shift ;;
            -j|--json)  format=json;    shift ;;
            --csv)      format=csv;     shift ;;

            -a|--all|--digests|--no-trunc|-q|--quiet)
                        ___x_cmd cmdstr IMAGE_OPTS "$1"
                        shift ;;
            -f|--filter|--format)
                        [ -n "$2" ] || N=docker M="The '$1' parameter cannot be empty." log:ret:64
                        ___x_cmd cmdstr IMAGE_OPTS "$1" "$2"
                        shift 2 ;;

            *)          N=docker M="Unkown options ==> $1" log:ret:64 ;;
        esac
    done

    ___x_cmd_docker_images___"$format"
}


# TODO: export image, rm image, info image, push image
___x_cmd_docker_images___app(){
    if [ ! -t 1 ] || ! ___x_cmd_is_interactive; then
        ___x_cmd_docker_images___csv
        return
    fi

    local image_id=
    local ___X_CMD_CSV_APP_SHBIN_CODE=
    local ___X_CMD_CSV_APP_DATA_IMAGE_ID=
    ___X_CMD_CSV_APP_SHBIN_CODE="xrc docker; " \
        ___x_cmd csv app --return var ___x_cmd_docker_images_main --csv || return 1
    image_id="$___X_CMD_CSV_APP_DATA_IMAGE_ID"

    [ -n "$image_id" ] || return 0

    local id=
    local cmd=
    ___x_cmd ui select id,cmd \
        "Next for image: $___X_CMD_CSV_APP_DATA_REPOSITORY"     \
        "x docker rmi $image_id"                                \
        "x docker rmi -f $image_id"                             \
        "x docker inspect $image_id"                            \
        "return 1"                                              || return 1
    docker:debug "run command -> $cmd"
    eval "$cmd"
}

___x_cmd_docker_images___json(){
    ___x_cmd cmdstr IMAGE_OPTS --format '{{json .}}'

    eval ___x_cmd___docker_origin images "$IMAGE_OPTS" | {
        if [ -z "$___X_CMD_DOCKER_IMAGES_PREFIX" ]; then
            ___x_cmd jq -s .
        else
            ___x_cmd jq --arg prefix "$___X_CMD_DOCKER_IMAGES_PREFIX" -s '.[] | select(.Repository | startswith( $prefix ))' | ___x_cmd jq -s .
        fi
    } | {
        # filter the keywords ...
        ___x_cmd_cmds cat
    }
}

___x_cmd_docker_images___csv(){
    ___x_cmd_docker_images___json | \
    ___x_cmd jo .\* | \
    ___x_cmd ja jl2c  .Repository .Tag .ID .UniqueSize .VirtualSize .CreatedAt .CreatedSince |\
        ___x_cmd csv header --add  Repository Tag ID UniqueSize VirtualSize CreatedAt CreatedSince

    # ___x_cmd cmdstr IMAGE_OPTS --format 'table {{.Repository}},{{.Tag}},{{.ID}},{{.CreatedSince}},{{.Size}},{{.Containers}},{{.CreatedAt}},{{.Digest}},{{.SharedSize}},{{.UniqueSize}}'

    # eval ___x_cmd___docker_origin images "$IMAGE_OPTS"
}
