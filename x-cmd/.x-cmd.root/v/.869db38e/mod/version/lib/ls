# shellcheck shell=dash

___x_cmd_version_ls(){
    [ $# -gt 0 ] || set - --nv

    local op="$1"; shift
    case "$op" in
        --nv|--json|--yml)  ___x_cmd_version_ls_"${op#--*}"  "$@"  ;;
        -h|--help)          ___x_cmd help -m version ls; return           ;;
    esac
}


___x_cmd_version_ls_nv(){
    if [ -t 1 ] && ___x_cmd_is_interactive; then
        ___x_cmd jo nav -- ___x_cmd version ls --json
    else
        ___x_cmd_version_ls_json
    fi
}


___x_cmd_version_ls_json(){
    local x_=; ___x_cmd_version___get_info_file_ || return
    < "$x_" ___x_cmd jo fmt
}

___x_cmd_version_ls_yml(){
    ___x_cmd_version_ls_json | ___x_cmd j2y
}

___x_cmd_version___get_info_file_(){
    x_="$___X_CMD_PKG_ROOT_PATH/metadata/$___X_CMD_PKG_VERSION/release/version.index.jso"
    if [ ! -f "$x_" ]; then
        ___x_cmd pkg update || return
    else
        case "$___X_CMD_VERSION0" in
            latest|beta|alpha|v*)
                [ "$x_" -nt "${___X_CMD_ROOT_METADATA}/version_sum" ] || {
                    x:debug -c "x pkg update" "The version information file may be outdated, please try updating the PKG resource package."
                }
            ;;
        esac
    fi
    [ -f "$x_" ] || N=x M="Not found version information file" log:ret:1
}
