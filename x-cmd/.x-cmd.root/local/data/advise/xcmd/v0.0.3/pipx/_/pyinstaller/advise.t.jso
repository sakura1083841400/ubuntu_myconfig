{
"#1"
:
{
"#desc"
:
""
}
,
"-h|--help"
:
{
"#desc"
:
"show this help message and exit"
}
,
"-v|--version"
:
{
"#desc"
:
"Show program version info and exit."
}
,
"--distpath"
:
{
"#desc"
:
"Where to put the bundled app (default: ./dist)"
}
,
"--workpath"
:
{
"#desc"
:
"Where to put all the temporary work files, .log, .pyzand etc. (default: ./build)"
}
,
"-y|--noconfirm"
:
{
"#desc"
:
"Replace output directory without asking for confirmation"
}
,
"--upx-dir"
:
{
"#desc"
:
"Path to UPX utility"
}
,
"-a|--ascii"
:
{
"#desc"
:
"Do not include unicode encoding support"
}
,
"--clean"
:
{
"#desc"
:
"Clean PyInstaller cache and remove temporary files before building."
}
,
"--log-level"
:
{
"#desc"
:
"Amount of detail in build-time console messages. "
}
,
"-D|--onedir"
:
{
"#desc"
:
"Create a one-folder bundle containing an executable"
}
,
"-F|--onefile"
:
{
"#desc"
:
"Create a one-file bundled executable."
}
,
"--specpath"
:
{
"#desc"
:
"Folder to store the generated spec file"
}
,
"-n|--name"
:
{
"#desc"
:
"Name to assign to the bundled app and spec"
}
,
"--add-data"
:
{
"#desc"
:
"Additional non-binary files or folders to be added to the executable."
}
,
"--add-binary"
:
{
"#desc"
:
"Additional binary files to be added to the executable."
}
,
"-p DIR|--paths"
:
{
"#desc"
:
"A path to search for imports (like using PYTHONPATH)."
}
,
"--hidden-import|--hiddenimport"
:
{
"#desc"
:
"Name an import not visible in the code of the script(s)."
}
,
"--collect-submodules"
:
{
"#desc"
:
"Collect all submodules from the specified package or module. "
}
,
"--collect-data|--collect-datas"
:
{
"#desc"
:
"Collect all data from the specified package or module. "
}
,
"--collect-binaries"
:
{
"#desc"
:
"Collect all binaries from the specified package or module. "
}
,
"--collect-all"
:
{
"#desc"
:
"Collect all submodules, data files, and binaries from the specified package or module. "
}
,
"--copy-metadata"
:
{
"#desc"
:
"Copy metadata for the specified package. "
}
,
"--recursive-copy-metadata"
:
{
"#desc"
:
"Copy metadata for the specified package and all its dependencies. "
}
,
"--additional-hooks-dir"
:
{
"#desc"
:
"An additional path to search for hooks. "
}
,
"--runtime-hook"
:
{
"#desc"
:
"Path to a custom runtime hook file. "
}
,
"--exclude-module"
:
{
"#desc"
:
"Optional module or package (the Python name, not the path name) that will be ignored (as though it was not found)."
}
,
"--key KEY"
:
{
"#desc"
:
"The key used to encrypt Python bytecode."
}
,
"--splash IMAGE_FILE"
:
{
"#desc"
:
"(EXPERIMENTAL) Add an splash screen with the image IMAGE_FILE to the application. The splash screen can display progress updates while unpacking."
}
,
"-d|--debug"
:
{
"#cand"
:
[
"all"
,
"imports"
,
"bootloader"
,
"noarchive"
]
}
,
"--python-option"
:
{
"#desc"
:
"Specify a command-line option to pass to the Python interpreter at runtime. "
}
,
"-s|--strip"
:
{
"#desc"
:
"Apply a symbol-table strip to the executable and shared libs"
}
,
"--noupx"
:
{
"#desc"
:
"Do not use UPX even if it is available"
}
,
"--upx-exclude"
:
{
"#desc"
:
"Prevent a binary from being compressed when using upx. "
}
,
"-c|--console|--nowindowed"
:
{
"#desc"
:
"Open a console window for standard i/o"
}
,
"-w|--windowed|--noconsole"
:
{
"#desc"
:
"Windows and Mac OS X: do not provide a console window for standard i/o. On Mac OS this also triggers building a Mac OS .app bundle. "
}
,
"-i|--icon"
:
{
"#desc"
:
"A program used to package Python scripts into standalone executable files, handles icons when building applications for different platforms."
}
,
"--disable-windowed-traceback"
:
{
"#desc"
:
"Disable traceback dump of unhandled exception in windowed mode, and instead display a message that this feature is disabled."
}
,
"--version-file"
:
{
"#desc"
:
"Add a version resource from FILE to the exe."
}
,
"-m|--manifest"
:
{
"#desc"
:
"Add manifest FILE or XML to the exe."
}
,
"--no-embed-manifest"
:
{
"#desc"
:
"Generate an external"
}
,
"-r RESOURCE|--resource"
:
{
"#desc"
:
"Add or update a resource to a Windows executable. "
}
,
"--uac-admin"
:
{
"#desc"
:
"Using this option creates a Manifest that will request elevation upon application start."
}
,
"--uac-uiaccess"
:
{
"#desc"
:
"Using this option allows an elevated application to work with Remote Desktop."
}
,
"--win-private-assemblies"
:
{
"#desc"
:
"Any Shared Assemblies bundled into the application will be changed into Private Assemblies."
}
,
"--win-no-prefer-redirects"
:
{
"#desc"
:
"While searching for Shared or Private Assemblies to bundle into the application, will try to bundle the exact versions of the assembly."
}
,
"--argv-emulation"
:
{
"#desc"
:
"Enable argv emulation for macOS app bundles."
}
,
"--osx-bundle-identifier"
:
{
"#desc"
:
"Mac OS .app bundle identifier is used as the default unique program name for code signing purposes. "
}
,
"--target-architecture|--target-arch"
:
{
"#desc"
:
"Enables switching between universal2 and single-arch version of frozen application."
}
,
"--codesign-identity"
:
{
"#desc"
:
"Code signing identity (macOS only)."
}
,
"--osx-entitlements-file"
:
{
"#desc"
:
"Entitlements file to use when code-signing the collected binaries (macOS only)."
}
,
"--runtime-tmpdir"
:
{
"#desc"
:
"Where to extract libraries and support files in onefile-mode."
}
,
"--bootloader-ignore-signals"
:
{
"#desc"
:
"Tell the bootloader to ignore signals rather than forwarding them to the child process."
}
}

