{
"auto"
:
{
"#desc"
:
"builds and serves a site; automatically detects site changes, rebuilds, and optionally refreshes a browser"
,
"-p|--port="
:
{
"#desc"
:
"Port number [default: 8000]"
,
"#1"
:
"ARG"
}
,
"-a|--address="
:
{
"#desc"
:
"Address to bind [default: 127.0.0.1]"
,
"#1"
:
"ARG"
}
,
"-b|--browser"
:
{
"#desc"
:
"Start a web browser"
}
,
"-6|--ipv6"
:
{
"#desc"
:
"Use IPv6"
}
,
"--no-server"
:
{
"#desc"
:
"Disable the server, automate rebuilds only"
}
}
,
"build"
:
{
"#desc"
:
"run tasks"
,
"-a|--always-execute"
:
{
"#desc"
:
"always execute tasks even if up-to-date [default: False]"
}
,
"-c|--continue"
:
{
"#desc"
:
"continue executing tasks even after a failure [default: False]"
}
,
"--no-continue"
:
{
"#desc"
:
"opposite of --continue"
}
,
"-v|--verbosity="
:
{
"#desc"
:
"0 capture (do not print) stdout/stderr from task.1 capture stdout only.2 do not capture anything (print everything immediately).[default: 1]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"-r|--reporter="
:
{
"#desc"
:
"Choose output reporter.[default: console]choices:console: console outputerror-only: Report only errors internal or TaskError and TaskFailure. executed-only: console, no output for skipped (up-to-date) and group tasks json: output in JSON format zero: report only internal errors from doit"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"-o|--output-file="
:
{
"#desc"
:
"write output into file [default: stdout] [default:<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"-n|--process="
:
{
"#desc"
:
"number of subprocesses [default: 0]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"-P|--parallel-type="
:
{
"#desc"
:
"Tasks can be executed in parallel in different ways: 'process': uses python multiprocessing module 'thread': uses threads [default: process]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--pdb"
:
{
"#desc"
:
"get into PDB (python debugger) post-mortem in case of unhandled exception"
}
,
"-s|--single"
:
{
"#desc"
:
"Execute only specified tasks ignoring their task_dep [default: False]"
}
,
"--auto-delayed-regex"
:
{
"#desc"
:
"Uses the default regex \".*\" for every delayed task loaderfor which no regex was explicitly defined"
}
,
"--failure-verbosity="
:
{
"#desc"
:
"Control re-display stdout/stderr for failed tasks on report summary. 0 do not show re-display 1 re-display stderr only 2 re-display both stderr/stdout [default: 0] [default: 0]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--strict"
:
{
"#desc"
:
"Fail on things that would normally be warnings."
}
,
"--invariant"
:
{
"#desc"
:
"Generate invariant output (for testing only!)."
}
,
"-q|--quiet"
:
{
"#desc"
:
"Run quietly."
}
,
"--db-file="
:
{
"#desc"
:
"file used to save successful runs [default: .doit.db]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--backend="
:
{
"#desc"
:
"Select dependency file backend. [default: dbm] choices: dbm, json, sqlite3"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--check_file_uptodate="
:
{
"#desc"
:
"Choose how to check if files have been modified. Available options [default: md5]: 'md5': use the md5sum 'timestamp': use the timestamp"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
}
,
"check"
:
{
"#desc"
:
"check links and files in the generated site"
,
"-l|--check-links"
:
{
"#desc"
:
"Check for dangling links"
}
,
"-f|--check-files"
:
{
"#desc"
:
"Check for unknown (orphaned and not generated) files"
}
,
"--clean-files"
:
{
"#desc"
:
"Remove all unknown files, use with caution"
}
,
"--find-sources"
:
{
"#desc"
:
"List possible source files for files with broken links."
}
,
"-v|--verbose"
:
{
"#desc"
:
"Be more verbose."
}
,
"-r|--remote"
:
{
"#desc"
:
"Check that remote links work."
}
}
,
"clean"
:
{
"#desc"
:
"clean action / remove targets"
,
"-c|--clean-dep"
:
{
"#desc"
:
"clean task dependencies too"
}
,
"-a|--clean-all"
:
{
"#desc"
:
"clean all task"
}
,
"-n|--dry-run"
:
{
"#desc"
:
"print actions without really executing them"
}
,
"--forget"
:
{
"#desc"
:
"also forget tasks after cleaning"
}
,
"--db-file="
:
{
"#desc"
:
"file used to save successful runs [default: .doit.db]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--backend="
:
{
"#desc"
:
"Select dependency file backend. [default: dbm] choices: dbm, json, sqlite3"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--check_file_uptodate="
:
{
"#desc"
:
"Choose how to check if files have been modified.Available options [default: md5]:'md5': use the md5sum 'timestamp': use the timestamp"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
}
,
"console"
:
{
"#desc"
:
"start an interactive Python console with access to your site"
,
"-b|--bpython"
:
{
"#desc"
:
"Use bpython"
}
,
"-i|--plain"
:
{
"#desc"
:
"Use IPython"
}
,
"-p|--plain"
:
{
"#desc"
:
"Use the plain Python interpreter"
}
,
"-c|--command="
:
{
"#desc"
:
"Run a single command"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"-s|--script="
:
{
"#desc"
:
"Execute a python script in the console context"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
}
,
"default_config"
:
{
"#desc"
:
"Print the default Nikola configuration."
}
,
"deploy"
:
{
"#desc"
:
"deploy the site"
}
,
"dumpdb"
:
{
"#desc"
:
"dump dependency DB"
,
"--db-file="
:
{
"#desc"
:
"file used to save successful runs [default: .doit.db]"
}
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"forget"
:
{
"#desc"
:
"clear successful run status from internal DB"
,
"-s|--follow-sub"
:
{
"#desc"
:
"forget task dependencies too"
}
,
"--disable-default"
:
{
"#desc"
:
"disable forgetting default tasks (when no arguments are passed)"
}
,
"--enable-default"
:
{
"#desc"
:
"opposite of --disable-default"
}
,
"-a|--all"
:
{
"#desc"
:
"forget all tasks"
}
,
"--db-file="
:
{
"#desc"
:
"file used to save successful runs [default: .doit.db]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--backend="
:
{
"#desc"
:
"Select dependency file backend. [default: dbm] choices: dbm, json, sqlite3"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
,
"--check_file_uptodate="
:
{
"#desc"
:
"Choose how to check if files have been modified. Available options [default: md5]: 'md5': use the md5sum 'timestamp': use the timestamp"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
}
,
"github_deploy"
:
{
"#desc"
:
"deploy the site to GitHub Pages"
,
"-m|--message="
:
{
"#desc"
:
"Commit message [default: Nikola auto commit.]"
,
"#1"
:
{
"#desc"
:
"ARG"
}
}
}
,
"ignore"
:
{
"#desc"
:
"ignore task (skip) on subsequent runs"
,
"--db-file=ARG"
:
{
"#desc"
:
"file used to save successful runs [default: .doit.db]"
}
,
"--backend=ARG"
:
{
"#desc"
:
"Select dependency file backend. [default: dbm] choices: dbm, json, sqlite3"
}
,
"--check_file_uptodate=ARG"
:
{
"#desc"
:
"Choose how to check if files have been modified. Available options [default: md5]: 'md5': use the md5sum 'timestamp': use the timestamp"
}
}
,
"import_wordpress"
:
{
"#desc"
:
"import a WordPress dump"
}
,
"info"
:
{
"#desc"
:
"show info about a task"
}
,
"init"
:
{
"#desc"
:
"create a Nikola site in the specified folder"
}
,
"list"
:
{
"#desc"
:
"list tasks from dodo file"
}
,
"new_page"
:
{
"#desc"
:
"create a new page in the site"
}
,
"new_post"
:
{
"#desc"
:
"create a new blog post or site page"
}
,
"orphans"
:
{
"#desc"
:
"list all orphans"
}
,
"plugin"
:
{
"#desc"
:
"manage plugins"
}
,
"reset-dep"
:
{
"#desc"
:
"recompute and save the state of file dependencies without executing actions"
}
,
"rst2html"
:
{
"#desc"
:
"compile reStructuredText to HTML files"
}
,
"serve"
:
{
"#desc"
:
"start the test webserver"
}
,
"status"
:
{
"#desc"
:
"display site status"
}
,
"strace"
:
{
"#desc"
:
"use strace to list file_deps and targets"
}
,
"subtheme"
:
{
"#desc"
:
"given a swatch name from bootswatch.com or hackerthemes.com and a parent theme, creates a custom theme"
}
,
"tabcompletion"
:
{
"#desc"
:
"generate script for tab-completion"
}
,
"theme"
:
{
"#desc"
:
"manage themes"
}
,
"version"
:
{
"#desc"
:
"print the Nikola version number"
}
,
"help"
:
{
"#desc"
:
"show help / reference"
}
,
"help <command>"
:
{
"#desc"
:
"show command usage"
}
,
"help <task-name>"
:
{
"#desc"
:
"show task usage"
}
}

