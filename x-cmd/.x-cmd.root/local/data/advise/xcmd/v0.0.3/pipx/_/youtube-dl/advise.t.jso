{
"#1"
:
{
"#desc"
:
""
}
,
"-h|--help"
:
{
"#desc"
:
"Print this help text and exit"
}
,
"--version"
:
{
"#desc"
:
"Print program version and exit"
}
,
"-U|--update"
:
{
"#desc"
:
"Update this program to latest version. Make sure that you have sufficient permissions (run with sudo if needed)"
}
,
"-i|--ignore-errors"
:
{
"#desc"
:
"Continue on download errors, for example to skip unavailable videos in a playlist"
}
,
"--abort-on-error"
:
{
"#desc"
:
"Abort downloading of further videos (in the playlist or the command line) if an error occurs"
}
,
"--dump-user-agent"
:
{
"#desc"
:
"Display the current browser identification"
}
,
"--list-extractors"
:
{
"#desc"
:
"List all supported extractors"
}
,
"--extractor-descriptions"
:
{
"#desc"
:
"Output descriptions of all supported extractors"
}
,
"--force-generic-extractor"
:
{
"#desc"
:
"Force extraction to use the generic extractor"
}
,
"--default-search"
:
{
"#desc"
:
"Use this prefix for unqualified URLs. For example \"gvsearch2:\" downloads two videos from google videos for youtube-dl \"large apple\". Use the value \"auto\" to let youtube-dl guess (\"auto_warning\" to emit a warning when guessing).\"erro\" just throws an error. The default value \"fixup_error\" repairs broken URLs, but emits an error if this is not possible instead of searching."
,
"#1"
:
{
"#desc"
:
"PREFIX"
}
}
,
"--ignore-config"
:
{
"#desc"
:
"Do not read configuration files. When given in the global configuration file /etc/youtube-dl.conf: Do not read the user configuration in ~/.config/youtube-dl/config(%APPDATA%/youtube-dl/config.txt on Windows)"
}
,
"--config-location"
:
{
"#desc"
:
"Location of the configuration file; either the path to the config or its containing directory."
,
"#1"
:
{
"#desc"
:
"PATH"
}
}
,
"--flat-playlist"
:
{
"#desc"
:
"Do not extract the videos of a playlist, only list them."
}
,
"--mark-watched"
:
{
"#desc"
:
"Mark videos watched (YouTube only)"
}
,
"--no-mark-watched"
:
{
"#desc"
:
"Do not mark videos watched (YouTube only)"
}
,
"--no-color"
:
{
"#desc"
:
"Do not emit color codes in output"
}
,
"--proxy"
:
{
"#desc"
:
"Use the specified HTTP/HTTPS/SOCKS proxy. To enable SOCKS proxy, specify a proper scheme. For example socks5://127.0.0.1:1080/. Pass in an empty string (--proxy \"\") for direct connection"
,
"#1"
:
{
"#desc"
:
"URL"
}
}
,
"--socket-timeout"
:
{
"#desc"
:
"Time to wait before giving up, in seconds"
,
"#1"
:
{
"#desc"
:
"SECONDS"
}
}
,
"--source-address"
:
{
"#desc"
:
"Client-side IP address to bind to"
,
"#1"
:
{
"#desc"
:
"IP"
}
}
,
"-4|--force-ipv4"
:
{
"#desc"
:
"Make all connections via IPv4"
}
,
"-6|--force-ipv6"
:
{
"#desc"
:
"Make all connections via IPv6"
}
,
"--geo-verification-proxy"
:
{
"#desc"
:
" Use this proxy to verify the IP address for some geo-restricted sites. The default proxy specified by --proxy (or none, if the option is not present) is used for the actual downloading."
,
"#1"
:
{
"#desc"
:
"URL"
}
}
,
"--geo-bypass"
:
{
"#desc"
:
"Bypass geographic restriction via faking X-Forwarded-For HTTP header"
}
,
"--no-geo-bypass"
:
{
"#desc"
:
"Do not bypass geographic restriction via faking X-Forwarded-For HTTP header"
}
,
"--geo-bypass-country"
:
{
"#desc"
:
"Force bypass geographic restriction with explicitly provided two-letter ISO 3166-2 country code"
,
"#1"
:
{
"#desc"
:
"CODE"
}
}
,
"--geo-bypass-ip-block"
:
{
"#desc"
:
"Force bypass geographic restriction with explicitly provided IP block in CIDR notation"
,
"#1"
:
{
"#desc"
:
"IP_BLOCK"
}
}
,
"--playlist-start"
:
{
"#desc"
:
"Playlist video to start at (default is 1)"
,
"#1"
:
{
"#desc"
:
"NUMBER"
}
}
,
"--playlist-end"
:
{
"#desc"
:
"Playlist video to end at (default is last)"
,
"#1"
:
{
"#desc"
:
"NUMBER"
}
}
,
"--playlist-items"
:
{
"#desc"
:
"Playlist video items to download. Specify indices of the videos in the playlist separated by commas like: \"--playlist-items 1,2,5,8\" if you want to download videos indexed 1, 2, 5, 8 in the playlist. You can specify range: \"--playlist-items 1-3,7,10-13\", it will download the videos at index 1, 2, 3, 7, 10, 11, 12 and 13."
,
"#1"
:
{
"#desc"
:
"ITEM_SPEC"
}
}
,
"--match-title"
:
{
"#desc"
:
"Download only matching titles (regex or caseless sub-string)"
,
"#1"
:
{
"#desc"
:
"REGEX"
}
}
,
"--reject-title"
:
{
"#desc"
:
"Skip download for matching titles (regex or caseless sub-string)"
,
"#1"
:
{
"#desc"
:
"REGEX"
}
}
,
"--max-downloads"
:
{
"#desc"
:
"Abort after downloading NUMBER files"
}
,
"--min-filesize"
:
{
"#desc"
:
"Do not download any videos smaller than SIZE (e.g. 50k or 44.6m)"
}
,
"--max-filesize"
:
{
"#desc"
:
"Do not download any videos larger than SIZE (e.g. 50k or 44.6m)"
}
,
"--date"
:
{
"#desc"
:
"Download only videos uploaded in this date."
}
,
"--datebefore"
:
{
"#desc"
:
"Download only videos uploaded on or before this date (i.e. inclusive)"
}
,
"--dateafter"
:
{
"#desc"
:
"Download only videos uploaded on or after this date (i.e. inclusive)"
}
,
"--min-views"
:
{
"#desc"
:
"Do not download any videos with less than COUNT views"
}
,
"--max-views"
:
{
"#desc"
:
"Do not download any videos with more than COUNT views"
}
,
"--match-filter "
:
{
"#desc"
:
"Generic video filter. "
}
,
"--no-playlist"
:
{
"#desc"
:
"Download only the video, if the URL refers to a video and a playlist."
}
,
"--yes-playlist"
:
{
"#desc"
:
"Download the playlist, if the URL refers to a video and a playlist."
}
,
"--age-limit"
:
{
"#desc"
:
"Download only videos suitable for the given age"
}
,
"--download-archive"
:
{
"#desc"
:
"Download only videos not listed in the archive file. Record the IDs of all downloaded videos in it."
}
,
"--include-ads"
:
{
"#desc"
:
"Download advertisements as well (experimental)"
}
,
"-r|--limit-rate"
:
{
"#desc"
:
"Maximum download rate in bytes per second (e.g. 50K or 4.2M)"
}
,
"-R|--retries"
:
{
"#desc"
:
"Number of retries (default is 10), or \"infinite\"."
}
,
"--fragment-retries"
:
{
"#desc"
:
"Number of retries for a fragment (default is 10), or \"infinite\" (DASH, hlsnative and ISM)"
}
,
"--skip-unavailable-fragments"
:
{
"#desc"
:
"Skip unavailable fragments (DASH, hlsnative and ISM)"
}
,
"--abort-on-unavailable-fragment"
:
{
"#desc"
:
"Abort downloading when some fragment is not available"
}
,
"--keep-fragments"
:
{
"#desc"
:
"Keep downloaded fragments on disk after downloading is finished; fragments are erased by default"
}
,
"--buffer-size"
:
{
"#desc"
:
"Size of download buffer (e.g. 1024 or 16K) (default is 1024)"
}
,
"--no-resize-buffer"
:
{
"#desc"
:
"Do not automatically adjust the buffer size. By default, the buffer size is automatically resized from an initial value of SIZE."
}
,
"--http-chunk-size"
:
{
"#desc"
:
"Size of a chunk for chunk-based HTTP downloading (e.g. 10485760 or 10M) (default is disabled)"
}
,
"--playlist-reverse"
:
{
"#desc"
:
"Download playlist videos in reverse order"
}
,
"--playlist-random"
:
{
"#desc"
:
"Download playlist videos in random order"
}
,
"--xattr-set-filesize"
:
{
"#desc"
:
"Set file xattribute ytdl.filesize with expected file size"
}
,
"--hls-prefer-native"
:
{
"#desc"
:
"Use the native HLS downloader instead of ffmpeg"
}
,
"--hls-prefer-ffmpeg"
:
{
"#desc"
:
"Use ffmpeg instead of the native HLS downloader"
}
,
"--hls-use-mpegts"
:
{
"#desc"
:
"Use the mpegts container for HLS videos, allowing to play the video while downloading (some players may not be able to play it)"
}
,
"--external-downloader"
:
{
"#desc"
:
"Use the specified external downloader."
}
,
"--external-downloader-args"
:
{
"#desc"
:
"Give these arguments to the external downloader"
}
,
"-a|--batch-file"
:
{
"#desc"
:
"File containing URLs to download."
}
,
"--id"
:
{
"#desc"
:
"Use only video ID in file name"
}
,
"-o|--output"
:
{
"#desc"
:
"Output filename template."
}
,
"--output-na-placeholder"
:
{
"#desc"
:
"Placeholder value for unavailable meta fields in output filename template."
}
,
"--autonumber-start"
:
{
"#desc"
:
"Specify the start value for %(autonumber)s (default is 1)"
}
,
"--restrict-filenames"
:
{
"#desc"
:
"Restrict filenames to only ASCII characters, and avoid \" & \" and spaces in filenames"
}
,
"-w|--no-overwrites"
:
{
"#desc"
:
"Do not overwrite files"
}
,
"-c|--continue"
:
{
"#desc"
:
"Force resume of partially downloaded files. By default, youtube-dl will resume downloads if possible."
}
,
"--no-continue"
:
{
"#desc"
:
"Do not resume partially downloaded files (restart from beginning)"
}
,
"--no-part"
:
{
"#desc"
:
"Do not use .part files - write directly into output file"
}
,
"--no-mtime"
:
{
"#desc"
:
"Do not use the Last-modified header to set the file modification time"
}
,
"--write-description"
:
{
"#desc"
:
"Write video description to a .description file"
}
,
"--write-info-json"
:
{
"#desc"
:
"Write video metadata to a .info.json file"
}
,
"--write-annotations"
:
{
"#desc"
:
"Write video annotations to a .annotations.xml file"
}
,
"--load-info-json"
:
{
"#desc"
:
"JSON file containing the video information."
}
,
"--cookies"
:
{
"#desc"
:
"File to read cookies from and dump cookie jar in"
}
,
"--cache-dir"
:
{
"#desc"
:
"Location in the filesystem where youtube-dl can store some downloaded  information permanently. "
}
,
"--no-cache-dir"
:
{
"#desc"
:
"Disable filesystem caching"
}
,
"--rm-cache-dir"
:
{
"#desc"
:
"Delete all filesystem cache files"
}
,
"--write-thumbnail"
:
{
"#desc"
:
"Write thumbnail image to disk"
}
,
"--write-all-thumbnails"
:
{
"#desc"
:
"Write all thumbnail image formats to disk"
}
,
"--list-thumbnails"
:
{
"#desc"
:
"Simulate and list all available thumbnail formats"
}
,
"-q|--quiet"
:
{
"#desc"
:
"Activate quiet mode"
}
,
"--no-warnings"
:
{
"#desc"
:
"Ignore warnings"
}
,
"-s|--simulate"
:
{
"#desc"
:
"Do not download the video and do not write anything to disk"
}
,
"--skip-download"
:
{
"#desc"
:
"Do not download the video"
}
,
"-g|--get-url"
:
{
"#desc"
:
"Simulate, quiet but print URL"
}
,
"-e|--get-title"
:
{
"#desc"
:
"Simulate, quiet but print title"
}
,
"--get-id"
:
{
"#desc"
:
"Simulate, quiet but print id"
}
,
"--get-thumbnail"
:
{
"#desc"
:
"Simulate, quiet but print thumbnail URL"
}
,
"--get-description"
:
{
"#desc"
:
"Simulate, quiet but print video description"
}
,
"--get-duration"
:
{
"#desc"
:
"Simulate, quiet but print video length"
}
,
"--get-filename"
:
{
"#desc"
:
"Simulate, quiet but print output filename"
}
,
"--get-format"
:
{
"#desc"
:
"Simulate, quiet but print output format"
}
,
"-j|--dump-json"
:
{
"#desc"
:
"Simulate, quiet but print JSON information."
}
,
"-J|--dump-single-json"
:
{
"#desc"
:
"Simulate, quiet but print JSON information for each command-line argument. "
}
,
"--print-json"
:
{
"#desc"
:
"Be quiet and print the video information as JSON"
}
,
"--newline"
:
{
"#desc"
:
"Output progress bar as new lines"
}
,
"--no-progress"
:
{
"#desc"
:
"Do not print progress bar"
}
,
"--console-title"
:
{
"#desc"
:
"Display progress in console titlebar"
}
,
"-v|--verbose"
:
{
"#desc"
:
"Print various debugging information"
}
,
"--dump-pages"
:
{
"#desc"
:
"Print downloaded pages encoded using base64 to debug problems"
}
,
"--write-pages"
:
{
"#desc"
:
"Write downloaded intermediary pages to files in the current directory to debug problems"
}
,
"--print-traffic"
:
{
"#desc"
:
"Display sent and read HTTP traffic"
}
,
"-C|--call-home"
:
{
"#desc"
:
"Contact the youtube-dl server for debugging"
}
,
"--no-call-home"
:
{
"#desc"
:
"Do NOT contact the youtube-dl server for debugging"
}
,
"--encoding"
:
{
"#desc"
:
"Force the specified encoding"
}
,
"--no-check-certificate"
:
{
"#desc"
:
"Suppress HTTPS certificate validation"
}
,
"--prefer-insecure"
:
{
"#desc"
:
"Use an unencrypted connection to retrieve information about the video."
}
,
"--user-agent"
:
{
"#desc"
:
"Specify a custom user agent"
}
,
"--referer"
:
{
"#desc"
:
"Specify a custom referer, use if the video access is restricted to one domain"
}
,
"--add-header"
:
{
"#desc"
:
"Specify a custom HTTP header and its value"
}
,
"--bidi-workaround"
:
{
"#desc"
:
"Work around terminals that lack bidirectional text support. Requires bidiv or fribidi executable in PATH"
}
,
"--sleep-interval"
:
{
"#desc"
:
"Number of seconds to sleep before each."
}
,
"--max-sleep-interval"
:
{
"#desc"
:
"Upper bound of a range for randomized sleep before each download (maximum possible number of seconds to sleep)."
}
,
"-f|--format"
:
{
"#desc"
:
"Video format code, see the \"FORMAT SELECTION\" for all the info"
}
,
"--all-formats"
:
{
"#desc"
:
"Download all available video formats"
}
,
"--prefer-free-formats"
:
{
"#desc"
:
"Prefer free video formats unless a specific one is requested"
}
,
"-F|--list-formats"
:
{
"#desc"
:
"List all available formats of requested videos"
}
,
"--youtube-skip-dash-manifest"
:
{
"#desc"
:
"Do not download the DASH manifests and related data on YouTube videos"
}
,
"--merge-output-format"
:
{
"#desc"
:
"If a merge is required (e.g.bestvideo+bestaudio), output to given container format."
}
,
"--write-sub"
:
{
"#desc"
:
"Write subtitle file"
}
,
"--write-auto-sub"
:
{
"#desc"
:
"Write automatically generated subtitle file (YouTube only)"
}
,
"--all-subs"
:
{
"#desc"
:
"Download all the available subtitles of the video"
}
,
"--list-subs"
:
{
"#desc"
:
"List all available subtitles for the video"
}
,
"--sub-format"
:
{
"#desc"
:
"Subtitle format"
}
,
"--sub-lang"
:
{
"#desc"
:
"Languages of the subtitles to download (optional) separated by commas, use --list-subs for available language tags"
}
,
"-u|--username"
:
{
"#desc"
:
"Login with this account ID"
}
,
"-p|--password"
:
{
"#desc"
:
"Account password. "
}
,
"-2|--twofactor"
:
{
"#desc"
:
"Two-factor authentication code"
}
,
"-n|--netrc"
:
{
"#desc"
:
"Use .netrc authentication data"
}
,
"--video-password"
:
{
"#desc"
:
"Video password (vimeo, youku)"
}
,
"--ap-mso"
:
{
"#desc"
:
"Adobe Pass multiple-system operator identifier"
}
,
"--ap-username"
:
{
"#desc"
:
"Multiple-system operator account login"
}
,
"--ap-password"
:
{
"#desc"
:
"Multiple-system operator account password."
}
,
"--ap-list-mso"
:
{
"#desc"
:
"List all supported multiple-system operators"
}
,
"-x|--extract-audio"
:
{
"#desc"
:
"Convert video files to audio-only files"
}
,
"--audio-format"
:
{
"#desc"
:
"Specify audio format"
,
"#cand"
:
[
"best"
,
"aac"
,
"flac"
,
"mp3"
,
"m4a"
,
"opus"
,
"vorbis"
,
"wav"
]
}
,
"--audio-quality"
:
{
"#desc"
:
"Specify ffmpeg/avconv audio quality"
}
,
"--recode-video"
:
{
"#desc"
:
"Encode the video to another format"
}
,
"--postprocessor-args"
:
{
"#desc"
:
"Give these arguments to the postprocessor"
}
,
"-k|--keep-video"
:
{
"#desc"
:
"Keep the video file on disk after the post-processing; the video is erased by default"
}
,
"--no-post-overwrites"
:
{
"#desc"
:
"Do not overwrite post-processed files; the post-processed files are overwritten by default"
}
,
"--embed-subs"
:
{
"#desc"
:
"Embed subtitles in the video"
}
,
"--embed-thumbnail"
:
{
"#desc"
:
"Embed thumbnail in the audio as cover art"
}
,
"--add-metadata"
:
{
"#desc"
:
"Write metadata to the video file"
}
,
"--metadata-from-title"
:
{
"#desc"
:
"Parse additional metadata like song title / artist from the video title."
}
,
"--xattrs"
:
{
"#desc"
:
"Write metadata to the video files xattrs"
}
,
"--fixup"
:
{
"#desc"
:
"Automatically correct known faults of the file. "
}
,
"--prefer-avconv"
:
{
"#desc"
:
"Prefer avconv over ffmpeg for running the postprocessors"
}
,
"--prefer-ffmpeg"
:
{
"#desc"
:
"Prefer ffmpeg over avconv for running the postprocessors (default)"
}
,
"--ffmpeg-location"
:
{
"#desc"
:
"Location of the ffmpeg/avconv binary"
}
,
"--exec"
:
{
"#desc"
:
"Execute a command on the file after downloading and post-processing, similar to find's -exec syntax."
}
,
"--convert-subs"
:
{
"#cand"
:
[
"srt"
,
"ass"
,
"vtt"
,
"lrc"
]
}
}

