{
"-h|--help"
:
{
"#desc"
:
"show this help message and exit"
}
,
"--rcfile"
:
{
"#desc"
:
"Specify a configuration file to load."
}
,
"--output"
:
{
"#desc"
:
"Specify an output file."
}
,
"--help-msg"
:
{
"#desc"
:
"Display a help message for the given message id and exit. The value may be a comma separated list of message ids."
}
,
"--list-msgs"
:
{
"#desc"
:
"Display a list of all pylint's messages divided by whether they are emittable with the given interpreter."
}
,
"--list-msgs-enabled"
:
{
"#desc"
:
"Display a list of what messages are enabled, disabled and non-emittable with the given configuration."
}
,
"--list-groups"
:
{
"#desc"
:
"List pylint's message groups."
}
,
"--list-conf-levels"
:
{
"#desc"
:
"Generate pylint's confidence levels."
}
,
"--list-extensions"
:
{
"#desc"
:
"List available extensions."
}
,
"--full-documentation"
:
{
"#desc"
:
"Generate pylint's full documentation."
}
,
"--generate-rcfile"
:
{
"#desc"
:
"Generate a sample configuration file according to the current configuration."
}
,
"--generate-toml-config"
:
{
"#desc"
:
"Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. The config is in the .toml format."
}
,
"--long-help"
:
{
"#desc"
:
"Show more verbose help."
}
,
"--init-hook"
:
{
"#desc"
:
"Python code to execute, usually for sys.path manipulation such as pygtk.require()."
}
,
"--errors-only|-E"
:
{
"#desc"
:
"In error mode, checkers without error messages are disabled and for others, only the ERROR messages are displayed, and no reports are done by default."
}
,
"--verbose |-v"
:
{
"#desc"
:
"In verbose mode, extra non-checker-related info will be displayed."
}
,
"--enable-all-extensions"
:
{
"#desc"
:
"Load and enable all available extensions. Use --list- extensions to see a list all available extensions."
}
,
"--ignore"
:
{
"#desc"
:
"Files or directories to be skipped. They should be base names, not paths. (default: ('CVS',))"
}
,
"--ignore-patterns"
:
{
"#desc"
:
"Files or directories matching the regular expression patterns are skipped. The regex matches against base names, not paths. The default value ignores Emacs file locks (default: (re.compile('^\\.#'),))"
}
,
"--ignore-paths"
:
{
"#desc"
:
"Add files or directories matching the regular expressions patterns to the ignore-list. "
}
,
"--persistent"
:
{
"#desc"
:
"Pickle collected data for later comparisons."
}
,
"--load-plugins"
:
{
"#desc"
:
"List of plugins to load, usually to register additional checkers."
}
,
"--fail-under"
:
{
"#desc"
:
"Specify a score threshold under which the program will exit with error."
}
,
"--fail-on"
:
{
"#desc"
:
"Return non-zero exit code if any of these messages/categories are detected, even if score is above --fail-under value."
}
,
"--jobs|-j"
:
{
"#desc"
:
"Use multiple processes to speed up Pylint."
}
,
"--limit-inference-results"
:
{
"#desc"
:
"Control the amount of potential inferred values when inferring a single object."
}
,
"--extension-pkg-allow-list"
:
{
"#desc"
:
"A comma-separated list of package or module names from where C extensions may be loaded."
}
,
"--extension-pkg-whitelist"
:
{
"#desc"
:
"A comma-separated list of package or module names from where C extensions may be loaded."
}
,
"--suggestion-mode"
:
{
"#desc"
:
"When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages."
}
,
"--exit-zero"
:
{
"#desc"
:
"Always return a 0 (non-error) status code, even if lint errors are found."
}
,
"--from-stdin"
:
{
"#desc"
:
"Interpret the stdin as a python script, whose filename needs to be passed as the module_or_package argument."
}
,
"--recursive"
:
{
"#desc"
:
"Discover python modules and packages in the file system subtree."
}
,
"--py-version"
:
{
"#desc"
:
"Minimum Python version to use for version dependent checks."
}
,
"--ignored-modules"
:
{
"#desc"
:
"List of module names for which member attributes should not be checked."
}
,
"--analyse-fallback-blocks"
:
{
"#desc"
:
"Analyse import fallback blocks. "
}
,
"--output-format|-f"
:
{
"#desc"
:
"Set the output format."
}
,
"--reports|-r"
:
{
"#desc"
:
"Tells whether to display a full report or only the messages."
}
,
"--evaluation"
:
{
"#desc"
:
"Python expression which should return a score less than or equal to 10."
}
,
"--score|-s"
:
{
"#desc"
:
"Activate the evaluation score."
}
,
"--msg-template"
:
{
"#desc"
:
"Template used to display messages."
}
,
"--confidence "
:
{
"#desc"
:
"Only show warnings with the listed confidence levels."
}
,
"--enable|-e"
:
{
"#desc"
:
"Enable the message, report, category or checker with the given id(s)."
}
,
"--disable|-d"
:
{
"#desc"
:
"Disable the message, report, category or checker with the given id(s). "
}
,
"--check-str-concat-over-line-jumps"
:
{
"#desc"
:
"This flag controls whether the implicit-str-concat should generate a warning on implicit string concatenation in sequences defined over several lines."
}
,
"--check-quote-consistency"
:
{
"#desc"
:
"This flag controls whether inconsistent-quotes generates a warning when the character used as a quote delimiter is used inconsistently within a module."
}
,
"--min-similarity-lines"
:
{
"#desc"
:
"Minimum lines number of a similarity."
}
,
"--ignore-comments"
:
{
"#desc"
:
"Comments are removed from the similarity computation"
}
,
"--ignore-docstrings"
:
{
"#desc"
:
"Docstrings are removed from the similarity computation"
}
,
"--ignore-imports"
:
{
"#desc"
:
"Imports are removed from the similarity computation"
}
,
"--ignore-signatures"
:
{
"#desc"
:
"Signatures are removed from the similarity computation"
}
,
"--good-names"
:
{
"#1"
:
{
"#cand"
:
[
"i"
,
"j"
,
"k"
,
"ex"
,
"Run"
,
"_"
]
}
}
,
"--good-names-rgxs"
:
{
"#desc"
:
"Good variable names regexes, separated by a comma. "
}
,
"--bad-names"
:
{
"#1"
:
{
"#cand"
:
[
"foo"
,
"bar"
,
"baz"
,
"toto"
,
"tutu"
,
"tata"
]
}
}
,
"--bad-names-rgxs"
:
{
"#desc"
:
"Bad variable names regexes, separated by a comma."
}
,
"--name-group"
:
{
"#desc"
:
"Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles."
}
,
"--include-naming-hint"
:
{
"#desc"
:
"Include a hint for the correct naming format with invalid-name."
}
,
"--property-classes"
:
{
"#desc"
:
"List of decorators that produce properties, such as abc.abstractproperty."
}
,
"--argument-naming-style"
:
{
"#desc"
:
"Naming style matching correct argument names."
}
,
"--argument-rgx"
:
{
"#desc"
:
"Regular expression matching correct argument names."
}
,
"--attr-naming-style"
:
{
"#desc"
:
"Naming style matching correct attribute names."
}
,
"--attr-rgx"
:
{
"#desc"
:
"Regular expression matching correct attribute names."
}
,
"--class-naming-style"
:
{
"#desc"
:
"Naming style matching correct class names. "
}
,
"--class-rgx"
:
{
"#desc"
:
"Regular expression matching correct class names."
}
,
"--class-attribute-naming-style"
:
{
"#desc"
:
"Naming style matching correct class attribute names."
}
,
"--class-attribute-rgx"
:
{
"#desc"
:
"Regular expression matching correct class attribute names. "
}
,
"--class-const-naming-style"
:
{
"#desc"
:
"Naming style matching correct class constant names."
}
,
"--class-const-rgx"
:
{
"#desc"
:
"Regular expression matching correct class constant names."
}
,
"--const-naming-style"
:
{
"#desc"
:
"Naming style matching correct constant names."
}
,
"--const-rgx"
:
{
"#desc"
:
"Regular expression matching correct constant names."
}
,
"--function-naming-style"
:
{
"#desc"
:
"Naming style matching correct function names."
}
,
"--function-rgx"
:
{
"#desc"
:
"Regular expression matching correct function names."
}
,
"--inlinevar-naming-style"
:
{
"#desc"
:
"Naming style matching correct inline iteration names."
}
,
"--inlinevar-rgx"
:
{
"#desc"
:
"Regular expression matching correct inline iteration names."
}
,
"--method-naming-style"
:
{
"#desc"
:
"Naming style matching correct method names."
}
,
"--method-rgx"
:
{
"#desc"
:
"Regular expression matching correct method names."
}
,
"--module-naming-style"
:
{
"#desc"
:
"Naming style matching correct module names. "
}
,
"--module-rgx"
:
{
"#desc"
:
"Regular expression matching correct module names."
}
,
"--typevar-rgx"
:
{
"#desc"
:
"Regular expression matching correct type variable names."
}
,
"--variable-naming-style"
:
{
"#desc"
:
"Naming style matching correct variable names."
}
,
"--variable-rgx"
:
{
"#desc"
:
"Regular expression matching correct variable names."
}
,
"--no-docstring-rgx"
:
{
"#desc"
:
"Regular expression which should only match function or class names that do not require a docstring."
}
,
"--docstring-min-length"
:
{
"#desc"
:
"Minimum line length for functions/classes that require docstrings, shorter ones are exempt."
}
,
"--init-import"
:
{
"#desc"
:
"Tells whether we should check for unused import in __init__ files. "
}
,
"--dummy-variables-rgx"
:
{
"#desc"
:
"A regular expression matching the name of dummy variables."
}
,
"--additional-builtins"
:
{
"#desc"
:
"List of additional names supposed to be defined in builtins."
}
,
"--callbacks"
:
{
"#desc"
:
"List of strings which can identify a callback function by name. "
}
,
"--redefining-builtins-modules"
:
[
"six.moves"
,
"past.builtins"
,
"future.builtins"
,
"builtins"
,
"io"
]
,
"--ignored-argument-names"
:
{
"#desc"
:
"Argument names that match this expression will be ignored."
}
,
"--allow-global-unused-variables"
:
{
"#desc"
:
"Tells whether unused global variables should be treated as a violation. "
}
,
"--allowed-redefined-builtins"
:
{
"#desc"
:
"List of names allowed to shadow builtins"
}
,
"--max-line-length"
:
{
"#desc"
:
"Maximum number of characters on a single line."
}
,
"--ignore-long-lines"
:
{
"#desc"
:
"Regexp for a line that is allowed to be longer than the limit."
}
,
"--single-line-if-stmt"
:
{
"#desc"
:
"Allow the body of an if to be on the same line as the test if there is no else."
}
,
"--single-line-class-stmt"
:
{
"#desc"
:
"Allow the body of a class to be on the same line as the declaration if body contains single statement."
}
,
"--max-module-lines"
:
{
"#desc"
:
"Maximum number of lines in a module."
}
,
"--indent-string"
:
{
"#desc"
:
"String used as indentation unit."
}
,
"--indent-after-paren"
:
{
"#desc"
:
"Number of spaces of indent required inside a hanging or continued line. "
}
,
"--expected-line-ending-format"
:
{
"#desc"
:
"Expected format of line ending, e.g. empty, LF or CRLF. "
}
,
"--notes"
:
{
"#desc"
:
"List of note tags to take in consideration, separated by a comma."
}
,
"--notes-rgx"
:
{
"#desc"
:
"Regular expression of note tags to take in consideration."
}
,
"--defining-attr-methods"
:
[
"__init__"
,
"__new__"
,
"setUp"
,
"__post_init__"
]
,
"--valid-classmethod-first-arg"
:
{
"#desc"
:
"List of valid names for the first argument in a class method."
}
,
"--valid-metaclass-classmethod-first-arg"
:
{
"#desc"
:
"List of valid names for the first argument in a metaclass class method."
}
,
"--exclude-protected"
:
[
"_asdict"
,
"_fields"
,
"_replace"
,
"_source"
,
"_make"
]
,
"--check-protected-access-in-special-methods"
:
{
"#desc"
:
"Warn about protected attribute access inside special methods"
}
,
"--spelling-dict"
:
{
"#desc"
:
"Spelling dictionary name. "
}
,
"--spelling-ignore-words"
:
{
"#desc"
:
"List of comma separated words that should not be checked. "
}
,
"--spelling-private-dict-file"
:
{
"#desc"
:
"A path to a file that contains the private dictionary; one word per line."
}
,
"--spelling-store-unknown-words"
:
{
"#desc"
:
"Tells whether to store unknown words to the private dictionary instead of raising a message. "
}
,
"--max-spelling-suggestions"
:
{
"#desc"
:
"Limits count of emitted suggestions for spelling mistakes"
}
,
"--spelling-ignore-comment-directives"
:
{
"#desc"
:
"List of comma separated words."
}
,
"--max-nested-blocks"
:
{
"#desc"
:
"Maximum number of nested blocks for function / method body"
}
,
"--never-returning-functions"
:
{
"#desc"
:
"Complete name of functions that never returns."
}
,
"--overgeneral-exceptions"
:
{
"#desc"
:
"Exceptions that will emit a warning when caught."
}
,
"--max-args"
:
{
"#desc"
:
"Maximum number of arguments for function / method."
}
,
"--max-locals"
:
{
"#desc"
:
"Maximum number of locals for function / method body."
}
,
"--max-returns"
:
{
"#desc"
:
"Maximum number of return / yield for function / method body."
}
,
"--max-branches"
:
{
"#desc"
:
"Maximum number of branch for function / method body."
}
,
"--max-statements"
:
{
"#desc"
:
"Maximum number of statements in function / method body."
}
,
"--max-parents"
:
{
"#desc"
:
"Maximum number of parents for a class."
}
,
"--ignored-parents"
:
{
"#desc"
:
"List of qualified class names to ignore when counting class parents"
}
,
"--max-attributes"
:
{
"#desc"
:
"Maximum number of attributes for a class."
}
,
"--min-public-methods"
:
{
"#desc"
:
"Minimum number of public methods for a class"
}
,
"--max-public-methods"
:
{
"#desc"
:
"Maximum number of public methods for a class"
}
,
"--max-bool-expr"
:
{
"#desc"
:
"Maximum number of boolean expressions in an if statement"
}
,
"--exclude-too-few-public-methods"
:
{
"#desc"
:
"List of regular expressions of class ancestor names to ignore when counting public methods"
}
,
"--deprecated-modules"
:
{
"#desc"
:
"Deprecated modules which should not be used, separated by a comma."
}
,
"--preferred-modules"
:
{
"#desc"
:
"Couples of modules and preferred modules, separated by a comma."
}
,
"--import-graph"
:
{
"#desc"
:
"Output a graph of all dependencies to the given file."
}
,
"--ext-import-graph"
:
{
"#desc"
:
"Output a graph of external dependencies to the given file."
}
,
"--int-import-graph"
:
{
"#desc"
:
"Output a graph of internal dependencies to the given file."
}
,
"--known-standard-library"
:
{
"#desc"
:
"Force import order to recognize a module as part of the standard compatibility libraries. "
}
,
"--known-third-party"
:
{
"#desc"
:
"Force import order to recognize a module as part of a third party library."
}
,
"--allow-any-import-level"
:
{
"#desc"
:
"List of modules that can be imported at any level, not just the top level one."
}
,
"--allow-wildcard-with-all"
:
{
"#desc"
:
"Allow wildcard imports from modules that define __all__."
}
,
"--logging-modules"
:
{
"#desc"
:
"Logging modules to check that the string format arguments are in logging function parameter format."
}
,
"--logging-format-style"
:
{
"#desc"
:
"The type of string formatting that logging methods do."
}
,
"--ignore-on-opaque-inference"
:
{
"#desc"
:
"This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring."
}
,
"--mixin-class-rgx"
:
{
"#desc"
:
"Regex pattern to define which classes are considered mixins."
}
,
"--ignore-mixin-members"
:
{
"#desc"
:
"Tells whether missing members accessed in mixin class should be ignored."
}
,
"--ignored-checks-for-mixins"
:
[
"no-member"
,
"not-async-context-manager"
,
"not-context-manager"
,
"attribute-defined-outside-init"
]
,
"--ignore-none"
:
{
"#desc"
:
"Tells whether to warn about missing members when the owner of the attribute is inferred to be None."
}
,
"--ignored-classes"
:
[
"optparse.Values"
,
"thread._local"
,
"_thread._local"
,
"argparse.Namespace"
]
,
"--generated-members"
:
{
"#desc"
:
"List of members which are set dynamically and missed by pylint inference system."
}
,
"--contextmanager-decorators"
:
{
"#desc"
:
"List of decorators that produce context managers, such as contextlib.contextmanager."
}
,
"--missing-member-hint-distance"
:
{
"#desc"
:
"The minimum edit distance a name should have in order to be considered a similar match for a missing member name."
}
,
"--missing-member-max-choices"
:
{
"#desc"
:
"The total number of similar names that should be taken in consideration when showing a hint for a missing member. "
}
,
"--missing-member-hint"
:
{
"#desc"
:
"Show a hint with possible names when a member name was not found. "
}
,
"--signature-mutators"
:
{
"#desc"
:
"List of decorators that change the signature of a decorated function. "
}
}

