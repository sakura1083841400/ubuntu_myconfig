{
"#1"
:
{
"#desc"
:
""
}
,
"profile"
:
{
"#desc"
:
"Create and manage IPython profiles."
}
,
"kernel"
:
{
"#desc"
:
"Start a kernel without an attached frontend."
}
,
"locate"
:
{
"#desc"
:
"print the path to the IPython dir"
}
,
"history"
:
{
"#desc"
:
"Manage the IPython history database."
}
,
"--debug"
:
{
"#desc"
:
"set log level to logging.DEBUG"
}
,
"--show-config"
:
{
"#desc"
:
"Show the application's configuration (hauman-readable format)"
}
,
"--show-config-json"
:
{
"#desc"
:
"Show the application's configuration (json format)"
}
,
"--quiet"
:
{
"#desc"
:
"set log level to logging.CRITICAL (minimize logging output)"
}
,
"--init"
:
{
"#desc"
:
"Initialize profile with default config files."
}
,
"--autoindent"
:
{
"#desc"
:
"Turn on autoindenting."
}
,
"--no-autoindent"
:
{
"#desc"
:
"Turn off autoindenting."
}
,
"--automagic"
:
{
"#desc"
:
"Turn on the auto calling of magic commands."
}
,
"--no-automagic"
:
{
"#desc"
:
"Turn off the auto calling of magic commands."
}
,
"--pdb"
:
{
"#desc"
:
"Enable auto calling the pdb debugger after every exception."
}
,
"--no-pdb"
:
{
"#desc"
:
"Disable auto calling the pdb debugger after every exception."
}
,
"--pprint"
:
{
"#desc"
:
"Enable auto pretty printing of results."
}
,
"--no-pprint"
:
{
"#desc"
:
"Disable auto pretty printing of results."
}
,
"--color-info"
:
null
,
"--no-color-info"
:
{
"#desc"
:
"Disable using colors for info related things."
}
,
"--ignore-cwd"
:
{
"#desc"
:
"Exclude the current working directory from sys.path"
}
,
"--no-ignore-cwd"
:
{
"#desc"
:
"Include the current working directory in sys.path"
}
,
"--nosep"
:
{
"#desc"
:
"Eliminate all spacing between prompts."
}
,
"--pylab"
:
{
"#desc"
:
"Pre-load matplotlib and numpy for interactive use with the default matplotlib backend."
,
"#cand"
:
[
"auto"
,
"agg"
,
"gtk"
,
"gtk3"
,
"gtk4"
,
"inline"
,
"ipympl"
,
"nbagg"
,
"notebook"
,
"osx"
,
"pdf"
,
"ps"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"svg"
,
"tk"
,
"widget"
,
"wx"
]
}
,
"--matplotlib"
:
{
"#desc"
:
"Configure matplotlib for interactive use with the default matplotlib backend."
,
"#cand"
:
[
"auto"
,
"agg"
,
"gtk"
,
"gtk3"
,
"gtk4"
,
"inline"
,
"ipympl"
,
"nbagg"
,
"notebook"
,
"osx"
,
"pdf"
,
"ps"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"svg"
,
"tk"
,
"widget"
,
"wx"
]
}
,
"--autoedit-syntax"
:
{
"#desc"
:
"Turn on auto editing of files with syntax errors."
}
,
"--no-autoedit-syntax"
:
{
"#desc"
:
"Turn off auto editing of files with syntax errors."
}
,
"--simple-prompt"
:
{
"#desc"
:
"Force simple minimal prompt using raw_input"
}
,
"--no-simple-prompt"
:
{
"#desc"
:
"Use a rich interactive prompt with prompt_toolkit"
}
,
"--banner"
:
{
"#desc"
:
"Display a banner upon starting IPython."
}
,
"--no-banner"
:
{
"#desc"
:
"Don't display a banner upon starting IPython."
}
,
"--confirm-exit"
:
{
"#desc"
:
"Set to confirm when you try to exit IPython with an EOF.By typing 'exit' or 'quit',you can force a direct exit without any confirmation."
}
,
"--no-confirm-exit"
:
{
"#desc"
:
"Don't prompt the user when exiting."
}
,
"--term-title"
:
{
"#desc"
:
"Enable auto setting the terminal title."
}
,
"--no-term-title"
:
{
"#desc"
:
"Disable auto setting the terminal title."
}
,
"--classic"
:
{
"#desc"
:
"Gives IPython a similar feel to the classic Python prompt."
}
,
"--quick"
:
{
"#desc"
:
"Enable quick startup with no config files."
}
,
"-i"
:
{
"#desc"
:
"If running code from the command line, become interactive afterwards."
}
,
"--log-level"
:
{
"#desc"
:
"Set the log level by value or name."
}
,
"--profile-dir"
:
{
"#desc"
:
"Set the profile location directly."
}
,
"--profile"
:
{
"#desc"
:
"The IPython profile to use."
}
,
"--ipython-dir"
:
{
"#desc"
:
"The name of the IPython directory. "
}
,
"--config"
:
{
"#desc"
:
"Path to an extra config file to load."
}
,
"--autocall"
:
{
"#desc"
:
"Make IPython automatically call any callable object even if you didn't type explicit parentheses."
}
,
"--colors"
:
[
"Neutral"
,
"NoColor"
,
"LightBG"
,
"Linux"
]
,
"--logfile"
:
{
"#desc"
:
"The name of the logfile to use."
}
,
"--logappend"
:
{
"#desc"
:
"Start logging to the given file in append mode. "
}
,
"-c"
:
{
"#desc"
:
"Execute the given command string."
}
,
"-m"
:
{
"#desc"
:
"Run the module as a script."
}
,
"--ext"
:
{
"#desc"
:
"Dotted module name(s) of one or more IPython extensions to load."
}
,
"--gui"
:
{
"#cand"
:
[
"asyncio"
,
"glut"
,
"gtk"
,
"gtk2"
,
"gtk3"
,
"gtk4"
,
"osx"
,
"pyglet"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"tk"
,
"wx"
,
"gtk2"
,
"qt4"
]
}
,
"--cache-size"
:
{
"#desc"
:
"Set the size of the output cache."
}
,
"--InteractiveShellApp.code_to_run"
:
{
"#desc"
:
"Execute the given command string."
}
,
"--InteractiveShellApp.exec_PYTHONSTARTUP"
:
{
"#desc"
:
"Run the file referenced by the PYTHONSTARTUP environment variable at IPython startup."
}
,
"--InteractiveShellApp.exec_files"
:
{
"#desc"
:
"List of files to run at IPython startup."
}
,
"--InteractiveShellApp.exec_lines"
:
{
"#desc"
:
"lines of code to run at IPython startup."
}
,
"--InteractiveShellApp.extensions"
:
{
"#desc"
:
"A list of dotted module names of IPython extensions to load."
}
,
"--InteractiveShellApp.extra_extensions"
:
{
"#desc"
:
"Dotted module name(s) of one or more IPython extensions to load."
}
,
"--InteractiveShellApp.file_to_run"
:
{
"#desc"
:
"A file to be run"
}
,
"--InteractiveShellApp.gui"
:
{
"#cand"
:
[
"asyncio"
,
"glut"
,
"gtk"
,
"gtk2"
,
"gtk3"
,
"gtk4"
,
"osx"
,
"pyglet"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"tk"
,
"wx"
,
"gtk2"
,
"qt4"
]
}
,
"--InteractiveShellApp.hide_initial_ns"
:
{
"#desc"
:
"Should variables loaded at startup."
}
,
"--InteractiveShellApp.ignore_cwd"
:
{
"#desc"
:
"If True, IPython will not add the current working directory to sys.path. When False, the current working directory is added to sys.path, allowing imports of modules defined in the current directory."
}
,
"--InteractiveShellApp.matplotlib"
:
{
"#cand"
:
[
"auto"
,
"agg"
,
"gtk"
,
"gtk3"
,
"gtk4"
,
"inline"
,
"ipympl"
,
"nbagg"
,
"notebook"
,
"osx"
,
"pdf"
,
"ps"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"svg"
,
"tk"
,
"widget"
,
"wx"
]
}
,
"--InteractiveShellApp.module_to_run"
:
{
"#desc"
:
"Run the module as a script."
}
,
"--InteractiveShellApp.pylab"
:
{
"#cand"
:
[
"auto"
,
"agg"
,
"gtk"
,
"gtk3"
,
"gtk4"
,
"inline"
,
"ipympl"
,
"nbagg"
,
"notebook"
,
"osx"
,
"pdf"
,
"ps"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"svg"
,
"tk"
,
"widget"
,
"wx"
]
}
,
"--InteractiveShellApp.pylab_import_all"
:
{
"#desc"
:
"If true, IPython will populate the user namespace with numpy, pylab, etc. and an import * is done from numpy and pylab, when using pylab mode. If False, pylab mode should not import any names into the user namespace."
}
,
"--InteractiveShellApp.reraise_ipython_extension_failures"
:
{
"#desc"
:
"Reraise exceptions encountered loading IPython extensions?"
}
,
"--Application.log_datefmt"
:
{
"#desc"
:
"The date format used by logging formatters for %(asctime)s"
}
,
"--Application.log_format"
:
{
"#desc"
:
"The Logging format template"
}
,
"--Application.log_level"
:
{
"#1"
:
[
0
,
10
,
20
,
30
,
40
,
50
,
"DEBUG"
,
"INFO"
,
"WARN"
,
"ERROR"
,
"CRITICAL"
]
}
,
"--Application.logging_config"
:
{
"#desc"
:
"Configure additional log handlers."
}
,
"--Application.show_config"
:
{
"#desc"
:
"Instead of starting the Application, dump configuration to stdout"
}
,
"--Application.show_config_json"
:
{
"#desc"
:
"Instead of starting the Application, dump configuration to stdout (as JSON)"
}
,
"--BaseIPythonApplication.add_ipython_dir_to_sys_path"
:
{
"#desc"
:
"No description"
}
,
"--BaseIPythonApplication.auto_create"
:
{
"#desc"
:
"Whether to create profile dir if it doesnâ€™t exist"
}
,
"--BaseIPythonApplication.copy_config_files"
:
{
"#desc"
:
"Whether to install the default config files into the profile dir."
}
,
"--BaseIPythonApplication.extra_config_file"
:
{
"#desc"
:
"Path to an extra config file to load."
}
,
"--BaseIPythonApplication.ipython_dir"
:
{
"#desc"
:
"The name of the IPython directory. This directory is used for logging configuration (through profiles), history storage, etc. "
}
,
"--BaseIPythonApplication.log_datefmt"
:
{
"#desc"
:
"The date format used by logging formatters for %(asctime)s"
}
,
"--BaseIPythonApplication.log_format"
:
{
"#desc"
:
"The Logging format template"
}
,
"--BaseIPythonApplication.log_level"
:
{
"#1"
:
[
0
,
10
,
20
,
30
,
40
,
50
,
"DEBUG"
,
"INFO"
,
"WARN"
,
"ERROR"
,
"CRITICAL"
]
}
,
"--BaseIPythonApplication.logging_config"
:
{
"#desc"
:
"Configure additional log handlers."
}
,
"--BaseIPythonApplication.overwrite"
:
{
"#desc"
:
"Whether to overwrite existing config files when copying"
}
,
"--BaseIPythonApplication.profile"
:
{
"#desc"
:
"The IPython profile to use."
}
,
"--BaseIPythonApplication.show_config"
:
{
"#desc"
:
"Instead of starting the Application, dump configuration to stdout"
}
,
"--BaseIPythonApplication.show_config_json"
:
{
"#desc"
:
"Instead of starting the Application, dump configuration to stdout (as JSON)"
}
,
"--BaseIPythonApplication.verbose_crash"
:
{
"#desc"
:
"Create a massive crash report when IPython encounters what may be an internal error. "
}
,
"--TerminalIPythonApp.add_ipython_dir_to_sys_path"
:
{
"#desc"
:
"No description"
}
,
"--TerminalIPythonApp.code_to_run"
:
{
"#desc"
:
"Execute the given command string."
}
,
"--TerminalIPythonApp.copy_config_files"
:
{
"#desc"
:
"Whether to install the default config files into the profile dir."
}
,
"--TerminalIPythonApp.display_banner"
:
{
"#desc"
:
"Whether to display a banner upon starting IPython."
}
,
"--TerminalIPythonApp.exec_PYTHONSTARTUP"
:
{
"#desc"
:
"Run the file referenced by the PYTHONSTARTUP environment variable at IPython startup."
}
,
"--TerminalIPythonApp.exec_files"
:
{
"#desc"
:
"List of files to run at IPython startup."
}
,
"--TerminalIPythonApp.exec_lines"
:
{
"#desc"
:
"lines of code to run at IPython startup."
}
,
"--TerminalIPythonApp.extensions"
:
{
"#desc"
:
"A list of dotted module names of IPython extensions to load."
}
,
"--TerminalIPythonApp.extra_config_file"
:
{
"#desc"
:
"Path to an extra config file to load."
}
,
"--TerminalIPythonApp.extra_extensions"
:
{
"#desc"
:
"Dotted module name(s) of one or more IPython extensions to load."
}
,
"--TerminalIPythonApp.file_to_run"
:
{
"#desc"
:
"A file to be run"
}
,
"--TerminalIPythonApp.force_interact"
:
{
"#desc"
:
"If a command or file is given via the command-line, e.g. â€˜ipython foo.pyâ€™, start an interactive shell after executing the file or command."
}
,
"--TerminalIPythonApp.gui"
:
{
"#cand"
:
[
"asyncio"
,
"glut"
,
"gtk"
,
"gtk2"
,
"gtk3"
,
"gtk4"
,
"osx"
,
"pyglet"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"tk"
,
"wx"
,
"gtk2"
,
"qt4"
]
}
,
"--TerminalIPythonApp.hide_initial_ns"
:
{
"#desc"
:
"Should variables loaded at startup (by startup files, exec_lines, etc.) be hidden from tools like %who?"
}
,
"--TerminalIPythonApp.ignore_cwd"
:
{
"#desc"
:
"If True, IPython will not add the current working directory to sys.path. When False, the current working directory is added to sys.path, allowing imports of modules defined in the current directory."
}
,
"--TerminalIPythonApp.interactive_shell_class"
:
{
"#desc"
:
"Class to use to instantiate the TerminalInteractiveShell object. Useful for custom Frontends"
}
,
"--TerminalIPythonApp.ipython_dir"
:
{
"#desc"
:
"The name of the IPython directory. "
}
,
"--TerminalIPythonApp.log_datefmt"
:
{
"#desc"
:
"The date format used by logging formatters for %(asctime)s"
}
,
"--TerminalIPythonApp.log_format"
:
{
"#desc"
:
"The Logging format template"
}
,
"--TerminalIPythonApp.log_level"
:
{
"#1"
:
[
0
,
10
,
20
,
30
,
40
,
50
,
"DEBUG"
,
"INFO"
,
"WARN"
,
"ERROR"
,
"CRITICAL"
]
}
,
"--TerminalIPythonApp.logging_config"
:
{
"#desc"
:
"Configure additional log handlers."
}
,
"--TerminalIPythonApp.matplotlib"
:
{
"#cand"
:
[
"auto"
,
"agg"
,
"gtk"
,
"gtk3"
,
"gtk4"
,
"inline"
,
"ipympl"
,
"nbagg"
,
"notebook"
,
"osx"
,
"pdf"
,
"ps"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"svg"
,
"tk"
,
"widget"
,
"wx"
]
}
,
"--TerminalIPythonApp.module_to_run"
:
{
"#desc"
:
"Run the module as a script."
}
,
"--TerminalIPythonApp.overwrite"
:
{
"#desc"
:
"Whether to overwrite existing config files when copying"
}
,
"--TerminalIPythonApp.profile"
:
{
"#desc"
:
"The IPython profile to use."
}
,
"--TerminalIPythonApp.pylab"
:
{
"#cand"
:
[
"auto"
,
"agg"
,
"gtk"
,
"gtk3"
,
"gtk4"
,
"inline"
,
"ipympl"
,
"nbagg"
,
"notebook"
,
"osx"
,
"pdf"
,
"ps"
,
"qt"
,
"qt4"
,
"qt5"
,
"qt6"
,
"svg"
,
"tk"
,
"widget"
,
"wx"
]
}
,
"--TerminalIPythonApp.pylab_import_all"
:
{
"#desc"
:
"If true, IPython will populate the user namespace with numpy, pylab, etc. and an import * is done from numpy and pylab, when using pylab mode.When False, pylab mode should not import any names into the user namespace."
}
,
"--TerminalIPythonApp.quick"
:
{
"#desc"
:
"Start IPython quickly by skipping the loading of config files."
}
,
"--TerminalIPythonApp.reraise_ipython_extension_failures"
:
{
"#desc"
:
"Reraise exceptions encountered loading IPython extensions?"
}
,
"--TerminalIPythonApp.show_config"
:
{
"#desc"
:
"Instead of starting the Application, dump configuration to stdout"
}
,
"--TerminalIPythonApp.show_config_json"
:
{
"#desc"
:
"Instead of starting the Application, dump configuration to stdout(as JSON)"
}
,
"--TerminalIPythonApp.verbose_crash"
:
{
"#desc"
:
"Create a massive crash report when IPython encounters what may be an internal error. "
}
,
"--InteractiveShell.ast_node_interactivity"
:
{
"#1"
:
[
"all"
,
"last"
,
"last_expr"
,
"none"
,
"last_expr_or_assign"
]
}
,
"--InteractiveShell.ast_transformers"
:
{
"#desc"
:
"A list of ast.NodeTransformer subclass instances, which will be applied to user input before code is run."
}
,
"--InteractiveShell.autoawait"
:
{
"#desc"
:
"Automatically run await statement in the top level repl."
}
,
"--InteractiveShell.autocall"
:
{
"#desc"
:
"Make IPython automatically call any callable object even if you didnâ€™t type explicit parentheses."
}
,
"--InteractiveShell.autoindent"
:
{
"#desc"
:
"Autoindent IPython code entered interactively."
}
,
"--InteractiveShell.automagic"
:
{
"#desc"
:
"Enable magic commands to be called without the leading %."
}
,
"--InteractiveShell.banner1"
:
{
"#desc"
:
"The part of the banner to be printed before the profile"
}
,
"--InteractiveShell.banner2"
:
{
"#desc"
:
"The part of the banner to be printed after the profile"
}
,
"--InteractiveShell.cache_size"
:
{
"#desc"
:
"Set the size of the output cache."
}
,
"--InteractiveShell.color_info"
:
{
"#desc"
:
"Use colors for displaying information about objects."
}
,
"--InteractiveShell.colors"
:
{
"#1"
:
[
"Neutral"
,
"NoColor"
,
"LightBG"
,
"Linux"
]
}
,
"--InteractiveShell.debug"
:
{
"#desc"
:
"No description"
}
,
"--InteractiveShell.disable_failing_post_execute"
:
{
"#desc"
:
"Donâ€™t call post-execute functions that have failed in the past."
}
,
"--InteractiveShell.display_page"
:
{
"#desc"
:
"If True, anything that would be passed to the pager will be displayed as regular output instead."
}
,
"--InteractiveShell.enable_html_pager"
:
{
"#desc"
:
"(Provisional API) enables html representation in mime bundles sent to pagers."
}
,
"--InteractiveShell.history_length"
:
{
"#desc"
:
"Total length of command history"
}
,
"--InteractiveShell.history_load_length"
:
{
"#desc"
:
"The number of saved history entries to be loaded into the history buffer at startup."
}
,
"--InteractiveShell.ipython_dir"
:
{
"#desc"
:
"No description"
}
,
"--InteractiveShell.logappend"
:
{
"#desc"
:
"Start logging to the given file in append mode."
}
,
"--InteractiveShell.logfile"
:
{
"#desc"
:
"The name of the logfile to use."
}
,
"--InteractiveShell.logstart"
:
{
"#desc"
:
"Start logging to the default log file in overwrite mode."
}
,
"--InteractiveShell.loop_runner"
:
{
"#desc"
:
"Select the loop runner that will be used to execute top-level asynchronous code"
}
,
"--InteractiveShell.object_info_string_level"
:
{
"#1"
:
[
0
,
1
,
2
]
}
,
"--InteractiveShell.pdb"
:
{
"#desc"
:
"Automatically call the pdb debugger after every exception."
}
,
"--InteractiveShell.quiet"
:
{
"#desc"
:
"No description"
}
,
"--InteractiveShell.separate_in"
:
{
"#desc"
:
"No description"
}
,
"--InteractiveShell.separate_out"
:
{
"#desc"
:
"No description"
}
,
"--InteractiveShell.separate_out2"
:
{
"#desc"
:
"No description"
}
,
"--InteractiveShell.show_rewritten_input"
:
{
"#desc"
:
"Show rewritten input, e.g. for autocall."
}
,
"--InteractiveShell.sphinxify_docstring"
:
{
"#desc"
:
"Enables rich html representation of docstrings. "
}
,
"--InteractiveShell.wildcards_case_sensitive"
:
{
"#desc"
:
"No description"
}
,
"--InteractiveShell.xmode"
:
{
"#1"
:
[
"Context"
,
"Plain"
,
"Verbose"
,
"Minimal"
]
}
,
"--TerminalInteractiveShell.ast_node_interactivity"
:
{
"#1"
:
[
"all"
,
"last"
,
"last_expr"
,
"none"
,
"last_expr_or_assign"
]
}
,
"--TerminalInteractiveShell.ast_transformers"
:
{
"#desc"
:
"A list of ast.NodeTransformer subclass instances, which will be applied to user input before code is run."
}
,
"--TerminalInteractiveShell.auto_match"
:
{
"#desc"
:
"Automatically add/delete closing bracket or quote when opening bracket or quote is entered/deleted. "
}
,
"--TerminalInteractiveShell.autoawait"
:
{
"#desc"
:
"Automatically run await statement in the top level repl."
}
,
"--TerminalInteractiveShell.autocall"
:
{
"#1"
:
[
0
,
1
,
2
]
}
,
"--TerminalInteractiveShell.autoformatter"
:
{
"#1"
:
[
"black"
,
"yapf"
,
"None"
]
}
,
"--TerminalInteractiveShell.autoindent"
:
{
"#desc"
:
"Autoindent IPython code entered interactively."
}
,
"--TerminalInteractiveShell.automagic"
:
{
"#desc"
:
"Enable magic commands to be called without the leading %."
}
,
"--TerminalInteractiveShell.autosuggestions_provider"
:
{
"#1"
:
[
"AutoSuggestFromHistory"
,
"None"
]
}
,
"--TerminalInteractiveShell.banner1"
:
{
"#desc"
:
"The part of the banner to be printed before the profile"
}
,
"--TerminalInteractiveShell.banner2"
:
{
"#desc"
:
"The part of the banner to be printed before the profile"
}
,
"--TerminalInteractiveShell.cache_size"
:
{
"#desc"
:
"Set the size of the output cache. "
}
,
"--TerminalInteractiveShell.color_info"
:
{
"#desc"
:
"Use colors for displaying information about objects."
}
,
"--TerminalInteractiveShell.colors"
:
{
"#1"
:
[
"Neutral"
,
"NoColor"
,
"LightBG"
,
"Linux"
]
}
,
"--TerminalInteractiveShell.confirm_exit"
:
{
"#desc"
:
"Set to confirm when you try to exit IPython with an EOF. By typing â€˜exitâ€™ or â€˜quitâ€™, you can force a direct exit without any confirmation."
}
,
"--TerminalInteractiveShell.debug"
:
{
"#desc"
:
"No description"
}
,
"--TerminalInteractiveShell.debugger_history_file"
:
{
"#desc"
:
"File in which to store and read history"
}
,
"--TerminalInteractiveShell.disable_failing_post_execute"
:
{
"#desc"
:
"Donâ€™t call post-execute functions that have failed in the past."
}
,
"--TerminalInteractiveShell.display_completions"
:
{
"#1"
:
[
"column"
,
"multicolumn"
,
"readlinelike"
]
}
,
"--TerminalInteractiveShell.display_page"
:
{
"#desc"
:
"If True, anything that would be passed to the pager will be displayed as regular output instead."
}
,
"--TerminalInteractiveShell.editing_mode"
:
{
"#1"
:
[
"vi"
,
"emacs "
]
}
,
"--TerminalInteractiveShell.editor"
:
{
"#desc"
:
"Set the editor used by IPython (default to $EDITOR/vi/notepad)."
}
,
"--TerminalInteractiveShell.emacs_bindings_in_vi_insert_mode"
:
{
"#desc"
:
"Add shortcuts from â€˜emacsâ€™ insert mode to â€˜viâ€™ insert mode."
}
,
"--TerminalInteractiveShell.enable_history_search"
:
{
"#desc"
:
"Allows to enable/disable the prompt toolkit history search"
}
,
"--TerminalInteractiveShell.enable_html_pager"
:
{
"#desc"
:
"(Provisional API) enables html representation in mime bundles sent to pagers."
}
,
"--TerminalInteractiveShell.extra_open_editor_shortcuts"
:
{
"#desc"
:
"Enable vi (v) or Emacs (C-X C-E) shortcuts to open an external editor. "
}
,
"--TerminalInteractiveShell.handle_return"
:
{
"#desc"
:
"Provide an alternative handler to be called when the user presses Return. "
}
,
"--TerminalInteractiveShell.highlight_matching_brackets"
:
{
"#desc"
:
"Highlight matching brackets."
}
,
"--TerminalInteractiveShell.highlighting_style"
:
{
"#desc"
:
"The name or class of a Pygments style to use for syntax highlighting. "
}
,
"--TerminalInteractiveShell.highlighting_style_overrides"
:
{
"#desc"
:
"Override highlighting format for specific tokens"
}
,
"--TerminalInteractiveShell.history_length"
:
{
"#desc"
:
"Total length of command history"
}
,
"--TerminalInteractiveShell.history_load_length"
:
{
"#desc"
:
"The number of saved history entries to be loaded into the history buffer at startup."
}
,
"--TerminalInteractiveShell.ipython_dir"
:
{
"#desc"
:
"Class to use to instantiate the shell inspector"
}
,
"--TerminalInteractiveShell.logappend"
:
{
"#desc"
:
"Start logging to the given file in append mode. "
}
,
"--TerminalInteractiveShell.logfile"
:
{
"#desc"
:
"The name of the logfile to use."
}
,
"--TerminalInteractiveShell.logstart"
:
{
"#desc"
:
"Start logging to the default log file in overwrite mode. "
}
,
"--TerminalInteractiveShell.loop_runner"
:
{
"#desc"
:
"Select the loop runner that will be used to execute top-level asynchronous code"
}
,
"--TerminalInteractiveShell.mime_renderers"
:
{
"#desc"
:
"No description"
}
,
"--TerminalInteractiveShell.modal_cursor"
:
{
"#desc"
:
"Cursor shape changes depending on vi mode: beam in vi insert mode, block in nav mode, underscore in replace mode."
}
,
"--TerminalInteractiveShell.mouse_support"
:
{
"#desc"
:
"Enable mouse support in the prompt"
}
,
"--TerminalInteractiveShell.object_info_string_level"
:
{
"#1"
:
[
0
,
1
,
2
]
}
,
"--TerminalInteractiveShell.pdb"
:
{
"#desc"
:
"Automatically call the pdb debugger after every exception."
}
,
"--TerminalInteractiveShell.prompt_includes_vi_mode"
:
{
"#desc"
:
"Display the current vi mode (when using vi editing mode)."
}
,
"--TerminalInteractiveShell.prompts_class"
:
{
"#desc"
:
"Class used to generate Prompt token for prompt_toolkit"
}
,
"--TerminalInteractiveShell.quiet"
:
{
"#desc"
:
"No description"
}
,
"--TerminalInteractiveShell.separate_in"
:
{
"#desc"
:
"No description"
}
,
"--TerminalInteractiveShell.separate_out"
:
{
"#desc"
:
"No description"
}
,
"--TerminalInteractiveShell.separate_out2"
:
{
"#desc"
:
"No description"
}
,
"--TerminalInteractiveShell.show_rewritten_input"
:
{
"#desc"
:
"Show rewritten input, e.g. for autocall."
}
,
"--TerminalInteractiveShell.simple_prompt"
:
{
"#desc"
:
"Use raw_input for the REPL, without completion and prompt colors."
}
,
"--TerminalInteractiveShell.space_for_menu"
:
{
"#desc"
:
"Number of line at the bottom of the screen to reserve for the tab completion menu, search history, â€¦etc, the height of these menus will at most this value. "
}
,
"--TerminalInteractiveShell.sphinxify_docstring"
:
{
"#desc"
:
"Enables rich html representation of docstrings. (This requires the docrepr module)."
}
,
"--TerminalInteractiveShell.term_title"
:
{
"#desc"
:
"Automatically set the terminal title"
}
,
"--TerminalInteractiveShell.term_title_format"
:
{
"#desc"
:
"Customize the terminal title format. This is a python format string. "
}
,
"--TerminalInteractiveShell.timeoutlen"
:
{
"#desc"
:
"The time in milliseconds that is waited for a mapped key sequence to complete."
}
,
"--TerminalInteractiveShell.true_color"
:
{
"#desc"
:
"Use 24bit colors instead of 256 colors in prompt highlighting."
}
,
"--TerminalInteractiveShell.ttimeoutlen"
:
{
"#desc"
:
"The time in milliseconds that is waited for a key code to complete."
}
,
"--TerminalInteractiveShell.wildcards_case_sensitive"
:
{
"#desc"
:
"No description"
}
,
"--TerminalInteractiveShell.xmode"
:
{
"#1"
:
[
"Context"
,
"Plain"
,
"Verbose"
,
"Minimal"
]
}
,
"--HistoryAccessor.connection_options"
:
{
"#desc"
:
"Options for configuring the SQLite connection"
}
,
"--HistoryAccessor.enabled"
:
{
"#desc"
:
"enable the SQLite history"
}
,
"--HistoryAccessor.hist_file"
:
{
"#desc"
:
"Path to file to use for SQLite history database."
}
,
"--HistoryManager.connection_options"
:
{
"#desc"
:
"Options for configuring the SQLite connection"
}
,
"--HistoryManager.db_cache_size"
:
{
"#desc"
:
"Write to database every x commands"
}
,
"--HistoryManager.db_log_output"
:
{
"#desc"
:
"Should the history database include output? "
}
,
"--HistoryManager.enabled"
:
{
"#desc"
:
"enable the SQLite history"
}
,
"--HistoryManager.hist_file"
:
{
"#desc"
:
"Path to file to use for SQLite history database."
}
,
"--MagicsManager.auto_magic"
:
{
"#desc"
:
"Automatically call line magics without requiring explicit % prefix"
}
,
"--MagicsManager.lazy_magics"
:
{
"#desc"
:
"Mapping from magic names to modules to load."
}
,
"--ProfileDir.location"
:
{
"#desc"
:
"Set the profile location directly. This overrides the logic used by the profile option."
}
,
"--BaseFormatter.deferred_printers"
:
{
"#desc"
:
"No description"
}
,
"--BaseFormatter.enabled"
:
{
"#desc"
:
"No description"
}
,
"--BaseFormatter.singleton_printers"
:
{
"#desc"
:
"No description"
}
,
"--BaseFormatter.type_printers"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.deferred_printers"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.float_precision"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.max_seq_length"
:
{
"#desc"
:
"Truncate large collections (lists, dicts, tuples, sets) to this size."
}
,
"--PlainTextFormatter.max_width"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.newline"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.pprint"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.singleton_printers"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.type_printers"
:
{
"#desc"
:
"No description"
}
,
"--PlainTextFormatter.verbose"
:
{
"#desc"
:
"No description"
}
,
"--Completer.backslash_combining_completions"
:
{
"#desc"
:
"Enable unicode completions, e.g. alpha<tab> ."
}
,
"--Completer.debug"
:
{
"#desc"
:
"Enable debug for the Completer. "
}
,
"--Completer.greedy"
:
{
"#desc"
:
"Activate greedy completion."
}
,
"--Completer.jedi_compute_type_timeout"
:
{
"#desc"
:
"Experimental: restrict time (in milliseconds) during which Jedi can compute types. "
}
,
"--Completer.use_jedi"
:
{
"#desc"
:
"Experimental: Use Jedi to generate autocompletions. Default to True if jedi is installed."
}
,
"--IPCompleter.backslash_combining_completions"
:
{
"#desc"
:
"Enable unicode completions, e.g. alpha<tab> . "
}
,
"--IPCompleter.debug"
:
{
"#desc"
:
"Enable debug for the Completer. "
}
,
"--IPCompleter.greedy"
:
{
"#desc"
:
"Activate greedy completion."
}
,
"--IPCompleter.jedi_compute_type_timeout"
:
{
"#desc"
:
"Experimental: restrict time (in milliseconds) during which Jedi can compute types."
}
,
"--IPCompleter.limit_to__all__"
:
{
"#desc"
:
"Instruct the completer to use __all__ for the completion Specifically, when completing on object.<tab>."
}
,
"--IPCompleter.merge_completions"
:
{
"#desc"
:
"Whether to merge completion results into a single list"
}
,
"--IPCompleter.omit__names"
:
{
"#1"
:
[
0
,
1
,
2
]
}
,
"--IPCompleter.profile_completions"
:
{
"#desc"
:
"If True, emit profiling data for completion subsystem using cProfile."
}
,
"--IPCompleter.profiler_output_dir"
:
{
"#desc"
:
"Template for path at which to output profile data for completions."
}
,
"--ScriptMagics.script_magics"
:
{
"#desc"
:
"Extra script cell magics to define"
}
,
"--ScriptMagics.script_paths"
:
{
"#desc"
:
"Dict mapping short â€˜rubyâ€™ names to full paths"
}
,
"--LoggingMagics.quiet"
:
{
"#desc"
:
"Suppress output of log state when logging is enabled"
}
,
"--StoreMagics.autorestore"
:
{
"#desc"
:
"If True, any %store-d variables will be automatically restored when IPython starts."
}
}

