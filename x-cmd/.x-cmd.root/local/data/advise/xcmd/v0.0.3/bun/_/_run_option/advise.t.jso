{
"--silent"
:
{
"#desc"
:
{
"en"
:
"Don not print the script command"
,
"cn"
:
"不打印脚本命令"
}
}
,
"-b|--bun"
:
{
"#desc"
:
{
"en"
:
"Force a script or package to use Bun.js instead of Node.js (via symlinking node)"
,
"cn"
:
"强制脚本或包使用 Bun.js 而不是 Node.js (通过符号链接 node)"
}
}
,
"--cwd"
:
{
"#desc"
:
{
"en"
:
"changes the process cwd"
,
"cn"
:
"改变 process cwd"
}
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__file"
}
}
,
"-c|--config"
:
{
"#desc"
:
{
"en"
:
"Specify path to Bun config file. Default (cwd/bunfig.toml)"
,
"cn"
:
"指定 Bun 配置文件路径。默认 (cwd/bunfig.toml)"
}
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__file"
}
}
,
"--env-file"
:
{
"#desc"
:
{
"en"
:
"Load environment variables from the specified file"
,
"cn"
:
"从指定文件加载环境变量"
}
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__file"
}
}
,
"--extension-order"
:
{
"#desc"
:
{
"en"
:
"Defaults \".tsx,.ts,.jsx,.js,.json\""
,
"cn"
:
"默认 \".tsx,.ts,.jsx,.js,.json\""
}
}
,
"--jsx-factory"
:
{
"#desc"
:
{
"en"
:
"Changes the function called when compiling JSX elements using the classic JSX runtime"
,
"cn"
:
"改变使用经典 JSX 运行时编译 JSX 元素时调用的函数"
}
,
"#1"
:
""
}
,
"--jsx-fragment"
:
{
"#desc"
:
{
"en"
:
"Changes the function called when compiling JSX fragments"
,
"cn"
:
"改变编译 JSX 片段时调用的函数"
}
,
"#1"
:
""
}
,
"--jsx-import-source"
:
{
"#desc"
:
{
"en"
:
"Declares the module specifier to be used for importing the jsx and jsxs factory functions"
,
"cn"
:
"声明用于导入 jsx 和 jsxs 工厂函数的模块规范"
}
,
"#1"
:
""
}
,
"--jsx-runtime"
:
{
"#desc"
:
{
"en"
:
"The JSX runtime to use when compiling JSX elements"
,
"cn"
:
"编译 JSX 元素时使用的 JSX 运行时"
}
,
"#1"
:
{
"#cand"
:
[
"automatic"
,
"classic"
]
}
}
,
"--main-fields"
:
{
"#desc"
:
{
"en"
:
"Main fields to lookup in package.json"
,
"cn"
:
"package.json 中要查找的主要字段"
}
,
"#1"
:
""
}
,
"--no-summary"
:
{
"#desc"
:
{
"en"
:
"Don't print a summary (when generating .bun)"
,
"cn"
:
"不打印摘要 (生成 .bun 时)"
}
}
,
"--tsconfig-override"
:
{
"#desc"
:
{
"en"
:
"Load tsconfig from path instead of cwd/tsconfig.json"
,
"cn"
:
"从路径加载 tsconfig 而不是 cwd/tsconfig.json"
}
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__file"
}
}
,
"-d|--define"
:
{
"#desc"
:
{
"en"
:
"Substitute K:V while parsing. e.g. --define process.env.NODE_ENV:\"development\". Values are parsed as JSON"
,
"cn"
:
"解析时替换 K:V。例如 --define process.env.NODE_ENV:\"development\"。值被解析为 JSON"
}
,
"#1"
:
""
}
,
"-e|--external"
:
{
"#desc"
:
{
"en"
:
"Exclude module from transpilation (can use * wildcards)"
,
"cn"
:
"从转译中排除模块 (可以使用 * 通配符)"
}
}
,
"-l|--loader"
:
{
"#desc"
:
{
"en"
:
"Parse files with .ext:loader. e.g. --loader .js:jsx"
,
"cn"
:
"使用 .ext:loader 解析文件。例如 --loader .js:jsx"
}
,
"#1"
:
""
}
,
"-u|--origin"
:
{
"#desc"
:
{
"en"
:
"Rewrite import URLs to start with --origin"
,
"cn"
:
"重写导入 URL 以 --origin 开头"
}
}
,
"-p|--port"
:
{
"#desc"
:
{
"en"
:
"Port to serve Bun's dev server on. Default \"3000\""
,
"cn"
:
"Bun 的开发服务器端口。默认 \"3000\""
}
}
,
"-e|--eval"
:
{
"#desc"
:
{
"en"
:
"Evaluate argument as a script"
,
"cn"
:
"将参数作为脚本执行"
}
}
,
"--print"
:
{
"#desc"
:
{
"en"
:
"Evaluate argument as a script and print the result"
,
"cn"
:
"将参数作为脚本执行并打印结果"
}
}
,
"--shell"
:
{
"#desc"
:
{
"en"
:
"Control the shell used for package.json scripts. Supports either 'bun' or 'system'"
,
"cn"
:
"控制 package.json 脚本使用的 shell。支持 'bun' 或 'system'"
}
}
,
"--smol"
:
{
"#desc"
:
{
"en"
:
"Use less memory, but run garbage collection more often"
,
"cn"
:
"使用更少的内存，但更频繁地运行垃圾回收"
}
}
,
"--minify"
:
{
"#desc"
:
{
"en"
:
"Minify (experimental)"
,
"cn"
:
"压缩 (实验性)"
}
}
,
"--minify-syntax"
:
{
"#desc"
:
{
"en"
:
"Minify syntax and inline data (experimental)"
,
"cn"
:
"压缩语法和内联数据 (实验性)"
}
}
,
"--minify-whitespace"
:
{
"#desc"
:
{
"en"
:
"Minify whitespace (experimental)"
,
"cn"
:
"压缩空格 (实验性)"
}
}
,
"--minify-identifiers"
:
{
"#desc"
:
{
"en"
:
"Minify identifiers"
,
"cn"
:
"压缩标识符"
}
}
,
"--no-macros"
:
{
"#desc"
:
{
"en"
:
"Disable macros from being executed in the bundler, transpiler and runtime"
,
"cn"
:
"禁用在 bundler、transpiler 和 runtime 中执行的宏"
}
}
,
"--target"
:
{
"#desc"
:
{
"en"
:
"The intended execution environment for the bundle"
,
"cn"
:
"bundle 的预期执行环境"
}
,
"#1"
:
{
"#cand"
:
[
"browser"
,
"bun"
,
"node"
]
}
}
,
"--inspect"
:
{
"#desc"
:
{
"en"
:
"Activate Bun's Debugger"
,
"cn"
:
"激活 Bun 的调试器"
}
,
"#1"
:
""
}
,
"--inspect-wait"
:
{
"#desc"
:
{
"en"
:
"Activate Bun's Debugger, wait for a connection before executing"
,
"cn"
:
"激活 Bun 的调试器，在执行之前等待连接"
}
,
"#1"
:
""
}
,
"--inspect-brk"
:
{
"#desc"
:
{
"en"
:
"Activate Bun's Debugger, set breakpoint on first line of code and wait"
,
"cn"
:
"激活 Bun 的调试器，在代码的第一行设置断点并等待"
}
,
"#1"
:
""
}
,
"--hot"
:
{
"#desc"
:
{
"en"
:
"Enable auto reload in the Bun runtime, test runner, or bundler"
,
"cn"
:
"在 Bun runtime、test runner 或 bundler 中启用自动重新加载"
}
}
,
"--watch"
:
{
"#desc"
:
{
"en"
:
"Automatically restart the process on file change"
,
"cn"
:
"在文件更改时自动重新启动进程"
}
}
,
"--no-install"
:
{
"#desc"
:
{
"en"
:
"Disable auto install in the Bun runtime"
,
"cn"
:
"禁用 Bun runtime 中的自动安装"
}
}
,
"--install"
:
{
"#desc"
:
{
"en"
:
"Install dependencies automatically when no node_modules are present"
,
"cn"
:
"当没有 node_modules 时自动安装依赖项"
}
,
"#1"
:
{
"#cand"
:
[
"auto"
,
"force"
,
"fallback"
]
}
}
,
"-i"
:
{
"#desc"
:
{
"en"
:
"Automatically install dependencies and use global cache in bun's runtime, equivalent to --install=fallback"
,
"cn"
:
"在 bun 的 runtime 中自动安装依赖项并使用全局缓存，相当于 --install=fallback"
}
}
,
"--prefer-offline"
:
{
"#desc"
:
{
"en"
:
"Skip staleness checks for packages in bun's JavaScript runtime and resolve from disk"
,
"cn"
:
"跳过 bun 的 JavaScript runtime 中的包的陈旧性检查并从磁盘解析"
}
}
,
"--prefer-latest"
:
{
"#desc"
:
{
"en"
:
"Use the latest matching versions of packages in bun's JavaScript runtime, always checking npm"
,
"cn"
:
"使用 bun 的 JavaScript runtime 中的包的最新匹配版本，始终检查 npm"
}
}
,
"--dump-environment-variables"
:
{
"#desc"
:
{
"en"
:
"Dump environment variables from .env and process as JSON and quit. for debugging"
,
"cn"
:
"从 .env 导出环境变量并作为 JSON 处理并退出. 用于调试"
}
}
,
"--dump-limits"
:
{
"#desc"
:
{
"en"
:
"Dump system limits. for debugging"
,
"cn"
:
"导出系统限制. 用于调试"
}
}
,
"--revision"
:
{
"#desc"
:
{
"en"
:
"Print version with revision and exit"
,
"cn"
:
"打印版本和修订号并退出"
}
}
}

