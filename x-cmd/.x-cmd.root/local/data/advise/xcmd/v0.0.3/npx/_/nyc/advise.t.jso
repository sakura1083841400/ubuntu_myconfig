{
"--cwd"
:
{
"#desc"
:
"working directory used when resolving paths [string] [default: \"/home/linux/work/x-cmd/advise/src/npx\"]"
}
,
"--nycrc-path"
:
{
"#desc"
:
"specify an explicit path to find nyc configuration"
}
,
"--temp-dir|-t"
:
{
"#desc"
:
"directory to output raw coverage information to"
}
,
"--exclude|-x"
:
{
"#desc"
:
"a list of specific files and directories that should be excluded from coverage|glob patterns are supported"
}
,
"--exclude-node-modules"
:
{
"#desc"
:
"whether or not to exclude all node_module folders"
}
,
"--include|-n"
:
{
"#desc"
:
"a list of specific files that should be covered"
}
,
"--extension|-e"
:
{
"#desc"
:
"a list of extensions that nyc should handle in addition to .js [string] [default: [\".js\",\".cjs\",\".mjs\",\".ts\",\".tsx\",\".jsx\"]]"
}
,
"--ignore-class-methods"
:
{
"#desc"
:
"class method names to ignore for coverage"
}
,
"--auto-wrap"
:
{
"#desc"
:
"allow `return` statements outside of functions"
}
,
"--es-modules"
:
{
"#desc"
:
"should files be treated as ES Modules"
}
,
"--parser-plugins"
:
{
"#desc"
:
"babel parser plugins to use when parsing the source"
}
,
"--compact"
:
{
"#desc"
:
"should the output be compacted?"
}
,
"--preserve-comments"
:
{
"#desc"
:
"should comments be preserved in the output?"
}
,
"--produce-source-map"
:
{
"#desc"
:
"should source maps be produced?"
}
,
"--source-map"
:
{
"#desc"
:
"should nyc detect and handle source maps?"
}
,
"--require|-i"
:
{
"#desc"
:
"a list of additional modules that nyc should attempt to require in its subprocess|e.g., @babel/register|@babel/polyfill  [default: []]"
}
,
"--instrument"
:
{
"#desc"
:
"should nyc handle instrumentation?"
}
,
"--exclude-after-remap"
:
{
"#desc"
:
"should exclude logic be performed after the source-map remaps filenames?"
}
,
"--branches"
:
{
"#desc"
:
"what % of branches must be covered?"
}
,
"--functions"
:
{
"#desc"
:
"what % of functions must be covered?"
}
,
"--lines"
:
{
"#desc"
:
"what % of lines must be covered?"
}
,
"--statements"
:
{
"#desc"
:
"what % of statements must be covered?"
}
,
"--per-file"
:
{
"#desc"
:
"check thresholds per file"
}
,
"--check-coverage"
:
{
"#desc"
:
"check whether coverage is within thresholds provided"
}
,
"--reporter|-r"
:
{
"#desc"
:
"coverage reporter(s) to use"
}
,
"--report-dir"
:
{
"#desc"
:
"directory to output coverage reports in"
}
,
"--show-process-tree"
:
{
"#desc"
:
"display the tree of spawned processes"
}
,
"--skip-empty"
:
{
"#desc"
:
"don't show empty files (no lines of code) in report"
}
,
"--skip-full"
:
{
"#desc"
:
"don't show files with 100% statement|branch|and function coverage"
}
,
"--silent|-s"
:
{
"#desc"
:
"don't output a report after tests finish running"
}
,
"--all|-a"
:
{
"#desc"
:
"whether or not to instrument all files of to project (not just the ones touched by your test suite)"
}
,
"--eager"
:
{
"#desc"
:
"instantiate the instrumenter at startup (see https://git.io/vMKZ9)"
}
,
"--cache|-c"
:
{
"#desc"
:
"cache instrumentation results for improved performance"
}
,
"--cache-dir"
:
{
"#desc"
:
"explicitly set location for instrumentation cache"
}
,
"--babel-cache"
:
{
"#desc"
:
"cache babel transpilation results for improved  performance"
}
,
"--use-spawn-wrap"
:
{
"#desc"
:
"use spawn-wrap instead of setting process.env.NODE_OPTIONS"
}
,
"--hook-require"
:
{
"#desc"
:
"should nyc wrap require?"
}
,
"--hook-run-in-context"
:
{
"#desc"
:
" should nyc wrap vm.runInContext?"
}
,
"--hook-run-in-this-context"
:
{
"#desc"
:
"should nyc wrap vm.runInThisContext?"
}
,
"--clean"
:
{
"#desc"
:
"should the .nyc_output folder be cleaned before executing tests"
}
,
"-h|--help"
:
{
"#desc"
:
"Show help                                [boolean]"
}
,
"--version"
:
{
"#desc"
:
"Show version number                      [boolean]"
}
}

