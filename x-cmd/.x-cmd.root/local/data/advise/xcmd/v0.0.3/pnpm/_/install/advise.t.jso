{
"$ref"
:
"x-cmd-advise://pnpm/_/share-add-install/advise.t.jso"
,
"--frozen-lockfile"
:
{
"#desc"
:
{
"en"
:
"Don't generate a lockfile and fail if an update is needed"
,
"cn"
:
"不生成锁定文件并在需要更新时失败"
}
}
,
"--no-frozen-lockfile"
:
{
"#desc"
:
{
"en"
:
"disable generate a lockfile and fail if an update is needed"
,
"cn"
:
"禁用生成锁定文件并在需要更新时失败"
}
}
,
"--verify-store-integrity"
:
{
"#desc"
:
{
"en"
:
"check whether packages in the store were mutated"
,
"cn"
:
"检查存储中的包是否被改变"
}
}
,
"--no-verify-store-integrity"
:
{
"#desc"
:
{
"en"
:
"DO NOT check whether packages in the store were mutated"
,
"cn"
:
"不检查存储中的包是否被改变"
}
}
,
"--child-concurrency"
:
{
"#desc"
:
{
"en"
:
"Controls the number of child processes run parallelly to build node modules"
,
"cn"
:
"控制并行运行构建节点模块的子进程数"
}
,
"#1"
:
""
}
,
"-D|--dev"
:
{
"#desc"
:
{
"en"
:
"Only `devDependencies` are installed regardless of the `NODE_ENV`"
,
"cn"
:
"无论 `NODE_ENV` 仅安装 `devDependencies`"
}
}
,
"--fix-lockfile"
:
{
"#desc"
:
{
"en"
:
"Fix broken lockfile entries automatically"
,
"cn"
:
"自动修复损坏的锁定文件条目"
}
}
,
"--force"
:
{
"#desc"
:
{
"en"
:
"Force reinstall dependencies"
,
"cn"
:
"强制重新下载安装依赖项"
}
}
,
"--prefer-offline"
:
{
"#desc"
:
{
"en"
:
"staleness checks for cached data will be bypassed"
,
"cn"
:
"将跳过缓存数据的陈旧性检查"
}
}
,
"--offline"
:
{
"#desc"
:
{
"cn"
:
"use only packages already available in the store"
,
"en"
:
"仅使用存储库中已有的包"
}
}
,
"--hoist-pattern"
:
{
"#desc"
:
{
"en"
:
"Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`"
,
"cn"
:
"将与模式匹配的所有依赖项提升到 `node_modules/.pnpm/node_modules`"
}
}
,
"--ignore-pnpmfile"
:
{
"#desc"
:
{
"en"
:
"Disable pnpm hooks defined in .pnpmfile.cjs"
,
"cn"
:
"禁用 .pnpmfile.cjs 中定义的 pnpm 钩子"
}
}
,
"--lockfile-dir"
:
{
"#desc"
:
{
"en"
:
"The directory in which the pnpm-lock.yaml of the package will be created"
,
"cn"
:
"将创建包的 pnpm-lock.yaml 的目录"
}
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__dir"
}
}
,
"--lockfile-only"
:
{
"#desc"
:
{
"en"
:
"Dependencies are not downloaded. Only `pnpm-lock.yaml` is updated"
,
"cn"
:
"不下载依赖项。仅更新 `pnpm-lock.yaml`"
}
}
,
"--merge-git-branch-lockfiles"
:
{
"#desc"
:
{
"en"
:
"Merge lockfiles were generated on git branch"
,
"cn"
:
"合并在 git 分支上生成的锁定文件"
}
}
,
"--modules-dir"
:
{
"#desc"
:
{
"en"
:
"The directory in which dependencies will be installed (instead of node_modules)"
,
"cn"
:
"将安装依赖项的目录 (而不是 node_modules)"
}
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__dir"
}
}
,
"--network-concurrency"
:
{
"#desc"
:
{
"en"
:
"Maximum number of concurrent network requests"
,
"cn"
:
"最大并发网络请求数"
}
,
"#1"
:
""
}
,
"--no-hoist"
:
{
"#desc"
:
{
"en"
:
"Dependencies inside the modules directory can only access their listed dependencies"
,
"cn"
:
"模块目录内的依赖项只能访问其列出的依赖项"
}
}
,
"--no-lockfile"
:
{
"#desc"
:
{
"en"
:
"Don't read or generate a `pnpm-lock.yaml` file"
,
"cn"
:
"不读取或生成 `pnpm-lock.yaml` 文件"
}
}
,
"--no-optional"
:
{
"#desc"
:
{
"en"
:
"`optionalDependencies` are not installed"
,
"cn"
:
"不安装 `optionalDependencies`"
}
}
,
"--package-import-method"
:
{
"#desc"
:
{
"en"
:
"The method used to decide which packages get from the store"
,
"cn"
:
"用于决定从存储库获取哪些包的方法"
}
,
"#cand"
:
[
{
"auto"
:
{
"#desc"
:
{
"en"
:
"Clones/hardlinks or copies packages"
,
"cn"
:
"克隆/硬链接或复制包"
}
}
}
,
{
"clone"
:
{
"#desc"
:
{
"en"
:
"Clone (aka copy-on-write) packages from the store"
,
"cn"
:
"从存储库克隆 (又名写时复制) 包"
}
}
}
,
{
"copy"
:
{
"#desc"
:
{
"en"
:
"Copy packages from the store"
,
"cn"
:
"从存储库复制包"
}
}
}
,
{
"hardlink"
:
{
"#desc"
:
{
"en"
:
"Hardlink packages from the store"
,
"cn"
:
"从存储库硬链接包"
}
}
}
]
}
,
"--prefer-frozen-lockfile"
:
{
"#desc"
:
{
"en"
:
"If the `pnpm-lock.yaml` file is up-to-date, prefer it over `package.json`"
,
"cn"
:
"如果 `pnpm-lock.yaml` 文件是最新的，则优先使用它而不是 `package.json`"
}
}
,
"-P|--prod"
:
{
"#desc"
:
{
"en"
:
"Packages in `devDependencies` won't be installed"
,
"cn"
:
"不安装 `devDependencies` 中的包"
}
}
,
"--public-hoist-pattern"
:
{
"#desc"
:
{
"en"
:
"Hoist all dependencies matching the pattern to `node_modules`"
,
"cn"
:
"将与模式匹配的所有依赖项提升到 `node_modules`"
}
,
"#1"
:
{
"#exec:stdout"
:
"___x_cmd_advise_exec___npm_ls_package"
}
}
,
"--resolution-only"
:
{
"#desc"
:
{
"en"
:
"useful for printing out peer dependency issues"
,
"cn"
:
"打印出有助于对等依赖项问题信息"
}
}
,
"--shamefully-hoist"
:
{
"#desc"
:
{
"en"
:
"Hoist all dependencies to `node_modules`"
,
"cn"
:
"将所有依赖项提升到 `node_modules`"
}
}
,
"--side-effects-cache"
:
{
"#desc"
:
{
"en"
:
"Use or cache the results of (pre/post)install hooks"
,
"cn"
:
"使用或缓存 (pre/post)install 钩子的结果"
}
}
,
"--side-effects-cache-readonly"
:
{
"#desc"
:
{
"en"
:
"Only use the side effects cache if present"
,
"cn"
:
"仅在存在时使用副作用缓存"
}
}
,
"--strict-peer-dependencies"
:
{
"#desc"
:
{
"en"
:
"Fail on missing or invalid peer dependencies"
,
"cn"
:
"在缺少或无效的对等依赖项时失败"
}
}
,
"--use-running-store-server"
:
{
"#desc"
:
{
"en"
:
"Only allows installation with a store server"
,
"cn"
:
"仅允许使用存储服务器安装"
}
}
,
"--use-store-server"
:
{
"#desc"
:
{
"en"
:
"Starts a store server in the background"
,
"cn"
:
"在后台启动存储服务器"
}
}
,
"--reporter"
:
{
"#desc"
:
{
"en"
:
"Specify the reporter to use"
,
"cn"
:
"指定要使用的报告器"
}
,
"#cand"
:
[
{
"append-only"
:
{
"#desc"
:
{
"en"
:
"The output is always appended to the end"
,
"cn"
:
"输出总是附加到末尾"
}
}
}
,
{
"default"
:
{
"#desc"
:
{
"en"
:
"The default reporter when the stdout is TTY"
,
"cn"
:
"当 stdout 是 TTY 时的默认报告器"
}
}
}
,
{
"ndjson"
:
{
"#desc"
:
{
"en"
:
"Prints all logs in ndjson format"
,
"cn"
:
"以 ndjson 格式打印所有日志"
}
}
}
,
{
"silent"
:
{
"#desc"
:
{
"en"
:
"No output is logged to the console, except fatal errors"
,
"cn"
:
"除了致命错误外，不会将任何输出记录到控制台"
}
}
}
]
}
,
"-s|--silent"
:
{
"#desc"
:
{
"en"
:
"No output is logged to the console, except fatal errors"
,
"cn"
:
"除了致命错误外，不会将任何输出记录到控制台"
}
}
}

